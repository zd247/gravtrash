{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useMemo, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar findIndex = function findIndex(_ref, map) {\n  var locationX = _ref.locationX,\n      locationY = _ref.locationY;\n\n  for (var _i = 0, _Object$entries = Object.entries(map); _i < _Object$entries.length; _i++) {\n    var _ref2 = _Object$entries[_i];\n\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    var index = _ref3[0];\n    var _ref3$ = _ref3[1];\n    var x = _ref3$.x;\n    var y = _ref3$.y;\n    var xEnd = _ref3$.xEnd;\n    var yEnd = _ref3$.yEnd;\n\n    if (x < locationX && locationX < xEnd && y < locationY && locationY < yEnd) {\n      return parseInt(index, 10);\n    }\n  }\n\n  return -1;\n};\n\nvar useClearByFocusCell = function useClearByFocusCell(options) {\n  var valueRef = useRef(options);\n  var cellsLayouts = useRef({});\n  valueRef.current = options;\n\n  var clearCodeByCoords = function clearCodeByCoords(coords) {\n    var index = findIndex(coords, cellsLayouts.current);\n\n    if (index !== -1) {\n      var _valueRef$current = valueRef.current,\n          value = _valueRef$current.value,\n          setValue = _valueRef$current.setValue;\n      var text = (value || '').slice(0, index);\n      setValue(text);\n    }\n  };\n\n  var getCellOnLayoutHandler = function getCellOnLayoutHandler(index) {\n    return function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height,\n          x = _event$nativeEvent$la.x,\n          y = _event$nativeEvent$la.y;\n      cellsLayouts.current[\"\" + index] = {\n        x: x,\n        xEnd: x + width,\n        y: y,\n        yEnd: y + height\n      };\n    };\n  };\n\n  var onPress = function onPress(event) {\n    return clearCodeByCoords(event.nativeEvent);\n  };\n\n  var onClick = function onClick(e) {\n    var offset = e.target.getClientRects()[0];\n    var locationX = e.clientX - offset.left;\n    var locationY = e.clientY - offset.top;\n    clearCodeByCoords({\n      locationX: locationX,\n      locationY: locationY\n    });\n  };\n\n  return [useMemo(function () {\n    return Platform.OS === 'web' ? {\n      onClick: onClick\n    } : {\n      onPress: onPress\n    };\n  }, []), getCellOnLayoutHandler];\n};\n\nexport default useClearByFocusCell;","map":{"version":3,"sources":["/home/zd/projects/trashgrav-SEPM/ReactNative/node_modules/react-native-confirmation-code-field/lib/useClearByFocusCell.js"],"names":["useMemo","useRef","findIndex","map","locationX","locationY","Object","entries","index","x","y","xEnd","yEnd","parseInt","useClearByFocusCell","options","valueRef","cellsLayouts","current","clearCodeByCoords","coords","value","setValue","text","slice","getCellOnLayoutHandler","event","nativeEvent","layout","width","height","onPress","onClick","e","offset","target","getClientRects","clientX","left","clientY","top","Platform","OS"],"mappings":"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","sourcesContent":["import { useMemo, useRef } from 'react';\nimport { Platform } from 'react-native';\nconst findIndex = ({ locationX, locationY }, map) => {\n    for (const [index, { x, y, xEnd, yEnd }] of Object.entries(map)) {\n        if (x < locationX &&\n            locationX < xEnd &&\n            y < locationY &&\n            locationY < yEnd) {\n            return parseInt(index, 10);\n        }\n    }\n    return -1;\n};\nconst useClearByFocusCell = (options) => {\n    const valueRef = useRef(options);\n    const cellsLayouts = useRef({});\n    valueRef.current = options;\n    const clearCodeByCoords = (coords) => {\n        const index = findIndex(coords, cellsLayouts.current);\n        if (index !== -1) {\n            const { value, setValue } = valueRef.current;\n            const text = (value || '').slice(0, index);\n            setValue(text);\n        }\n    };\n    const getCellOnLayoutHandler = (index) => (event) => {\n        const { width, height, x, y } = event.nativeEvent.layout;\n        cellsLayouts.current[`${index}`] = {\n            x,\n            xEnd: x + width,\n            y,\n            yEnd: y + height,\n        };\n    };\n    const onPress = (event) => clearCodeByCoords(event.nativeEvent);\n    // For support react-native-web\n    const onClick = (e) => {\n        const offset = e.target.getClientRects()[0];\n        const locationX = e.clientX - offset.left;\n        const locationY = e.clientY - offset.top;\n        clearCodeByCoords({ locationX, locationY });\n    };\n    return [\n        useMemo(() => (Platform.OS === 'web' ? { onClick } : { onPress }), \n        // eslint-disable-next-line\n        []),\n        getCellOnLayoutHandler,\n    ];\n};\nexport default useClearByFocusCell;\n"]},"metadata":{},"sourceType":"module"}