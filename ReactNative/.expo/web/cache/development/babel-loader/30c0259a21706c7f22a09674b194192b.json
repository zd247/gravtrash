{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/node_modules/react-native-confirmation-code-field/lib/CodeField.js\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { forwardRef } from 'react';\nimport { getStyle, getSymbols } from \"./utils\";\nimport useFocusState from \"./useFocusState\";\nimport styles from \"./CodeField.styles\";\nvar DEFAULT_CELL_COUNT = 4;\n\nvar CodeField = function CodeField(_ref, ref) {\n  var rootStyle = _ref.rootStyle,\n      textInputStyle = _ref.textInputStyle,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      value = _ref.value,\n      renderCell = _ref.renderCell,\n      _ref$cellCount = _ref.cellCount,\n      cellCount = _ref$cellCount === void 0 ? DEFAULT_CELL_COUNT : _ref$cellCount,\n      _ref$RootProps = _ref.RootProps,\n      RootProps = _ref$RootProps === void 0 ? {} : _ref$RootProps,\n      _ref$RootComponent = _ref.RootComponent,\n      RootComponent = _ref$RootComponent === void 0 ? View : _ref$RootComponent,\n      rest = _objectWithoutProperties(_ref, [\"rootStyle\", \"textInputStyle\", \"onBlur\", \"onFocus\", \"value\", \"renderCell\", \"cellCount\", \"RootProps\", \"RootComponent\"]);\n\n  var _useFocusState = useFocusState({\n    onBlur: onBlur,\n    onFocus: onFocus\n  }),\n      _useFocusState2 = _slicedToArray(_useFocusState, 3),\n      isFocused = _useFocusState2[0],\n      handleOnBlur = _useFocusState2[1],\n      handleOnFocus = _useFocusState2[2];\n\n  var cells = getSymbols(value || '', cellCount).map(function (symbol, index, symbols) {\n    var isFirstEmptySymbol = symbols.indexOf('') === index;\n    return renderCell({\n      index: index,\n      symbol: symbol,\n      isFocused: isFocused && isFirstEmptySymbol\n    });\n  });\n  return React.createElement(RootComponent, _extends({}, RootProps, {\n    style: getStyle(styles.root, rootStyle),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }), cells, React.createElement(TextInput, _extends({\n    caretHidden: true,\n    disableFullscreenUI: true,\n    spellCheck: false,\n    autoCorrect: false,\n    blurOnSubmit: false,\n    clearButtonMode: \"never\",\n    autoCapitalize: \"characters\",\n    underlineColorAndroid: \"transparent\",\n    maxLength: cellCount\n  }, rest, {\n    value: value,\n    onBlur: handleOnBlur,\n    onFocus: handleOnFocus,\n    style: getStyle(styles.textInput, textInputStyle),\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default forwardRef(CodeField);","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/node_modules/react-native-confirmation-code-field/lib/CodeField.js"],"names":["React","forwardRef","getStyle","getSymbols","useFocusState","styles","DEFAULT_CELL_COUNT","CodeField","ref","rootStyle","textInputStyle","onBlur","onFocus","value","renderCell","cellCount","RootProps","RootComponent","View","rest","isFocused","handleOnBlur","handleOnFocus","cells","map","symbol","index","symbols","isFirstEmptySymbol","indexOf","root","textInput"],"mappings":";;;;;;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,UAAnB;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;AACA,IAAMC,kBAAkB,GAAG,CAA3B;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAmJC,GAAnJ,EAA2J;AAAA,MAAxJC,SAAwJ,QAAxJA,SAAwJ;AAAA,MAA7IC,cAA6I,QAA7IA,cAA6I;AAAA,MAA7HC,MAA6H,QAA7HA,MAA6H;AAAA,MAArHC,OAAqH,QAArHA,OAAqH;AAAA,MAA5GC,KAA4G,QAA5GA,KAA4G;AAAA,MAArGC,UAAqG,QAArGA,UAAqG;AAAA,4BAAzFC,SAAyF;AAAA,MAAzFA,SAAyF,+BAA7ET,kBAA6E;AAAA,4BAAzDU,SAAyD;AAAA,MAAzDA,SAAyD,+BAA7C,EAA6C;AAAA,gCAAzCC,aAAyC;AAAA,MAAzCA,aAAyC,mCAAzBC,IAAyB;AAAA,MAAhBC,IAAgB;;AAAA,uBACxHf,aAAa,CAAC;AAC3DO,IAAAA,MAAM,EAANA,MAD2D;AAE3DC,IAAAA,OAAO,EAAPA;AAF2D,GAAD,CAD2G;AAAA;AAAA,MAClKQ,SADkK;AAAA,MACvJC,YADuJ;AAAA,MACzIC,aADyI;;AAKzK,MAAMC,KAAK,GAAGpB,UAAU,CAACU,KAAK,IAAI,EAAV,EAAcE,SAAd,CAAV,CAAmCS,GAAnC,CAAuC,UAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,EAA4B;AAC7E,QAAMC,kBAAkB,GAAGD,OAAO,CAACE,OAAR,CAAgB,EAAhB,MAAwBH,KAAnD;AACA,WAAOZ,UAAU,CAAC;AACdY,MAAAA,KAAK,EAALA,KADc;AAEdD,MAAAA,MAAM,EAANA,MAFc;AAGdL,MAAAA,SAAS,EAAEA,SAAS,IAAIQ;AAHV,KAAD,CAAjB;AAKH,GAPa,CAAd;AAQA,SAAQ,oBAAC,aAAD,eAAmBZ,SAAnB;AAA8B,IAAA,KAAK,EAAEd,QAAQ,CAACG,MAAM,CAACyB,IAAR,EAAcrB,SAAd,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACLc,KADK,EAEN,oBAAC,SAAD;AAAW,IAAA,WAAW,MAAtB;AAAuB,IAAA,mBAAmB,MAA1C;AAA2C,IAAA,UAAU,EAAE,KAAvD;AAA8D,IAAA,WAAW,EAAE,KAA3E;AAAkF,IAAA,YAAY,EAAE,KAAhG;AAAuG,IAAA,eAAe,EAAC,OAAvH;AAA+H,IAAA,cAAc,EAAC,YAA9I;AAA2J,IAAA,qBAAqB,EAAC,aAAjL;AAA+L,IAAA,SAAS,EAAER;AAA1M,KAAyNI,IAAzN;AAA+N,IAAA,KAAK,EAAEN,KAAtO;AAA6O,IAAA,MAAM,EAAEQ,YAArP;AAAmQ,IAAA,OAAO,EAAEC,aAA5Q;AAA2R,IAAA,KAAK,EAAEpB,QAAQ,CAACG,MAAM,CAAC0B,SAAR,EAAmBrB,cAAnB,CAA1S;AAA8U,IAAA,GAAG,EAAEF,GAAnV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFM,CAAR;AAIH,CAjBD;;AAkBA,eAAeP,UAAU,CAACM,SAAD,CAAzB","sourcesContent":["import { TextInput, View, } from 'react-native';\nimport React, { forwardRef } from 'react';\nimport { getStyle, getSymbols } from './utils';\nimport useFocusState from './useFocusState';\nimport styles from './CodeField.styles';\nconst DEFAULT_CELL_COUNT = 4;\nconst CodeField = ({ rootStyle, textInputStyle, onBlur, onFocus, value, renderCell, cellCount = DEFAULT_CELL_COUNT, RootProps = {}, RootComponent = View, ...rest }, ref) => {\n    const [isFocused, handleOnBlur, handleOnFocus] = useFocusState({\n        onBlur,\n        onFocus,\n    });\n    const cells = getSymbols(value || '', cellCount).map((symbol, index, symbols) => {\n        const isFirstEmptySymbol = symbols.indexOf('') === index;\n        return renderCell({\n            index,\n            symbol,\n            isFocused: isFocused && isFirstEmptySymbol,\n        });\n    });\n    return (<RootComponent {...RootProps} style={getStyle(styles.root, rootStyle)}>\n      {cells}\n      <TextInput caretHidden disableFullscreenUI spellCheck={false} autoCorrect={false} blurOnSubmit={false} clearButtonMode=\"never\" autoCapitalize=\"characters\" underlineColorAndroid=\"transparent\" maxLength={cellCount} {...rest} value={value} onBlur={handleOnBlur} onFocus={handleOnFocus} style={getStyle(styles.textInput, textInputStyle)} ref={ref}/>\n    </RootComponent>);\n};\nexport default forwardRef(CodeField);\n"]},"metadata":{},"sourceType":"module"}