{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar react_native_gesture_handler_1 = require(\"react-native-gesture-handler\");\n\nvar get_spring_config_1 = require(\"./utils/get-spring-config\");\n\nvar devices_1 = require(\"./utils/devices\");\n\nvar has_absolute_style_1 = require(\"./utils/has-absolute-style\");\n\nvar styles_1 = require(\"./styles\");\n\nvar _react_native_1$Dimen = react_native_1.Dimensions.get('window'),\n    screenHeight = _react_native_1$Dimen.height;\n\nvar AnimatedKeyboardAvoidingView = react_native_1.Animated.createAnimatedComponent(react_native_1.KeyboardAvoidingView);\nvar AnimatedFlatList = react_native_1.Animated.createAnimatedComponent(react_native_1.FlatList);\nvar AnimatedSectionList = react_native_1.Animated.createAnimatedComponent(react_native_1.SectionList);\nvar GestureHandlerWrapper = react_native_gesture_handler_1.GestureHandlerRootView !== null && react_native_gesture_handler_1.GestureHandlerRootView !== void 0 ? react_native_gesture_handler_1.GestureHandlerRootView : react_native_1.View;\nvar USE_NATIVE_DRIVER = true;\nvar ACTIVATED = 20;\nvar PAN_DURATION = 150;\n\nvar Modalize = function (_React$Component) {\n  _inherits(Modalize, _React$Component);\n\n  var _super = _createSuper(Modalize);\n\n  function Modalize(props) {\n    var _this;\n\n    _classCallCheck(this, Modalize);\n\n    _this = _super.call(this, props);\n    _this.snaps = [];\n    _this.cancelTranslateY = new react_native_1.Animated.Value(1);\n    _this.beginScrollYValue = 0;\n    _this.beginScrollY = new react_native_1.Animated.Value(0);\n    _this.dragY = new react_native_1.Animated.Value(0);\n    _this.translateY = new react_native_1.Animated.Value(screenHeight);\n    _this.modal = React.createRef();\n    _this.modalChildren = React.createRef();\n    _this.modalContentView = React.createRef();\n    _this.contentView = React.createRef();\n    _this.modalOverlay = React.createRef();\n    _this.modalOverlayTap = React.createRef();\n    _this.willCloseModalize = false;\n    _this.initialComputedModalHeight = 0;\n\n    _this.open = function (dest) {\n      var _this$props = _this.props,\n          onOpen = _this$props.onOpen,\n          alwaysOpen = _this$props.alwaysOpen;\n\n      if (onOpen) {\n        onOpen();\n      }\n\n      _this.onAnimateOpen(alwaysOpen, dest);\n    };\n\n    _this.close = function (dest) {\n      var onClose = _this.props.onClose;\n\n      if (onClose) {\n        onClose();\n      }\n\n      _this.onAnimateClose(dest);\n    };\n\n    _this.scrollTo = function () {\n      if (_this.contentView.current) {\n        var ref = _this.contentView.current;\n        var scrollResponder = ref.getScrollResponder ? ref.getScrollResponder() : ref.getNode().getScrollResponder();\n        scrollResponder.scrollTo.apply(scrollResponder, arguments);\n      }\n    };\n\n    _this.scrollToIndex = function () {\n      var flatListProps = _this.props.flatListProps;\n\n      if (!flatListProps) {\n        return console.error(\"[react-native-modalize] You can't use the 'scrollToIndex' method with something else than the FlatList component.\");\n      }\n\n      if (_this.contentView.current) {\n        var _ref$getNode;\n\n        var ref = _this.contentView.current;\n\n        (_ref$getNode = ref.getNode()).scrollToIndex.apply(_ref$getNode, arguments);\n      }\n    };\n\n    _this.onAnimateOpen = function (alwaysOpen) {\n      var dest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n      var _this$props2 = _this.props,\n          onOpened = _this$props2.onOpened,\n          snapPoint = _this$props2.snapPoint,\n          useNativeDriver = _this$props2.useNativeDriver,\n          openAnimationConfig = _this$props2.openAnimationConfig,\n          onPositionChange = _this$props2.onPositionChange,\n          panGestureAnimatedValue = _this$props2.panGestureAnimatedValue;\n      var timing = openAnimationConfig.timing,\n          spring = openAnimationConfig.spring;\n      var _this$state = _this.state,\n          overlay = _this$state.overlay,\n          modalHeight = _this$state.modalHeight;\n      react_native_1.BackHandler.addEventListener('hardwareBackPress', _this.onBackPress);\n      var toValue = 0;\n      var toPanValue = 0;\n\n      if (dest === 'top') {\n        toValue = 0;\n      } else if (alwaysOpen) {\n        toValue = (modalHeight || 0) - alwaysOpen;\n      } else if (snapPoint) {\n        toValue = (modalHeight || 0) - snapPoint;\n      }\n\n      if (panGestureAnimatedValue && (alwaysOpen || snapPoint)) {\n        toPanValue = 0;\n      } else if (panGestureAnimatedValue && !alwaysOpen && (dest === 'top' || dest === 'default')) {\n        toPanValue = 1;\n      }\n\n      _this.setState({\n        isVisible: true,\n        showContent: true\n      });\n\n      if (alwaysOpen && dest !== 'top' || snapPoint && dest === 'default') {\n        _this.modalPosition = 'initial';\n      } else {\n        _this.modalPosition = 'top';\n      }\n\n      react_native_1.Animated.parallel([react_native_1.Animated.timing(overlay, {\n        toValue: alwaysOpen && dest === 'default' ? 0 : 1,\n        duration: timing.duration,\n        easing: react_native_1.Easing.ease,\n        useNativeDriver: USE_NATIVE_DRIVER\n      }), panGestureAnimatedValue ? react_native_1.Animated.timing(panGestureAnimatedValue, {\n        toValue: toPanValue,\n        duration: PAN_DURATION,\n        useNativeDriver: useNativeDriver\n      }) : react_native_1.Animated.delay(0), spring ? react_native_1.Animated.spring(_this.translateY, _extends(_extends({}, get_spring_config_1.getSpringConfig(spring)), {\n        toValue: toValue,\n        useNativeDriver: USE_NATIVE_DRIVER\n      })) : react_native_1.Animated.timing(_this.translateY, {\n        toValue: toValue,\n        duration: timing.duration,\n        easing: timing.easing,\n        useNativeDriver: USE_NATIVE_DRIVER\n      })]).start(function () {\n        if (onOpened) {\n          onOpened();\n        }\n\n        if (onPositionChange) {\n          onPositionChange(_this.modalPosition);\n        }\n      });\n    };\n\n    _this.onAnimateClose = function () {\n      var dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n      var _this$props3 = _this.props,\n          onClosed = _this$props3.onClosed,\n          useNativeDriver = _this$props3.useNativeDriver,\n          snapPoint = _this$props3.snapPoint,\n          closeAnimationConfig = _this$props3.closeAnimationConfig,\n          alwaysOpen = _this$props3.alwaysOpen,\n          onPositionChange = _this$props3.onPositionChange,\n          panGestureAnimatedValue = _this$props3.panGestureAnimatedValue;\n      var timing = closeAnimationConfig.timing,\n          spring = closeAnimationConfig.spring;\n      var _this$state2 = _this.state,\n          overlay = _this$state2.overlay,\n          modalHeight = _this$state2.modalHeight;\n      var lastSnap = snapPoint ? _this.snaps[1] : 80;\n      var toInitialAlwaysOpen = dest === 'alwaysOpen' && Boolean(alwaysOpen);\n      var toValue = toInitialAlwaysOpen ? (modalHeight || 0) - alwaysOpen : screenHeight;\n      react_native_1.BackHandler.removeEventListener('hardwareBackPress', _this.onBackPress);\n      _this.beginScrollYValue = 0;\n\n      _this.beginScrollY.setValue(0);\n\n      react_native_1.Animated.parallel([react_native_1.Animated.timing(overlay, {\n        toValue: 0,\n        duration: timing.duration,\n        easing: react_native_1.Easing.ease,\n        useNativeDriver: USE_NATIVE_DRIVER\n      }), panGestureAnimatedValue ? react_native_1.Animated.timing(panGestureAnimatedValue, {\n        toValue: 0,\n        duration: PAN_DURATION,\n        useNativeDriver: useNativeDriver\n      }) : react_native_1.Animated.delay(0), spring ? react_native_1.Animated.spring(_this.translateY, _extends(_extends({}, get_spring_config_1.getSpringConfig(spring)), {\n        toValue: toValue,\n        useNativeDriver: USE_NATIVE_DRIVER\n      })) : react_native_1.Animated.timing(_this.translateY, {\n        duration: timing.duration,\n        easing: react_native_1.Easing.out(react_native_1.Easing.ease),\n        toValue: toValue,\n        useNativeDriver: USE_NATIVE_DRIVER\n      })]).start(function () {\n        if (onClosed) {\n          onClosed();\n        }\n\n        if (alwaysOpen && dest === 'alwaysOpen' && onPositionChange) {\n          onPositionChange('initial');\n        }\n\n        if (alwaysOpen && dest === 'alwaysOpen') {\n          _this.modalPosition = 'initial';\n        }\n\n        _this.setState({\n          showContent: toInitialAlwaysOpen\n        });\n\n        _this.translateY.setValue(toValue);\n\n        _this.dragY.setValue(0);\n\n        _this.willCloseModalize = false;\n\n        _this.setState({\n          lastSnap: lastSnap,\n          isVisible: toInitialAlwaysOpen\n        });\n      });\n    };\n\n    _this.onModalizeContentLayout = function (_ref) {\n      var layout = _ref.nativeEvent.layout;\n      var adjustToContentHeight = _this.props.adjustToContentHeight;\n      var keyboardHeight = _this.state.keyboardHeight;\n\n      _this.setState({\n        modalHeight: Math.min(layout.height + (!adjustToContentHeight || keyboardHeight ? layout.y : 0), _this.initialComputedModalHeight - react_native_1.Platform.select({\n          ios: 0,\n          android: keyboardHeight\n        }))\n      });\n    };\n\n    _this.onContentViewLayout = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var _this$props4 = _this.props,\n          adjustToContentHeight = _this$props4.adjustToContentHeight,\n          disableScrollIfPossible = _this$props4.disableScrollIfPossible,\n          onLayout = _this$props4.onLayout;\n\n      if (onLayout) {\n        onLayout(nativeEvent);\n      }\n\n      if (!adjustToContentHeight) {\n        return;\n      }\n\n      var height = nativeEvent.layout.height;\n      var shorterHeight = height < _this.initialComputedModalHeight;\n      var disableScroll = shorterHeight && disableScrollIfPossible;\n\n      _this.setState({\n        disableScroll: disableScroll\n      });\n    };\n\n    _this.onHandleComponent = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (nativeEvent.oldState === react_native_gesture_handler_1.State.BEGAN) {\n        _this.beginScrollY.setValue(0);\n      }\n\n      _this.onHandleChildren({\n        nativeEvent: nativeEvent\n      });\n    };\n\n    _this.onHandleChildren = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props5 = _this.props,\n          snapPoint = _this$props5.snapPoint,\n          useNativeDriver = _this$props5.useNativeDriver,\n          adjustToContentHeight = _this$props5.adjustToContentHeight,\n          alwaysOpen = _this$props5.alwaysOpen,\n          closeAnimationConfig = _this$props5.closeAnimationConfig,\n          dragToss = _this$props5.dragToss,\n          onPositionChange = _this$props5.onPositionChange,\n          panGestureAnimatedValue = _this$props5.panGestureAnimatedValue,\n          threshold = _this$props5.threshold,\n          velocity = _this$props5.velocity;\n      var timing = closeAnimationConfig.timing;\n      var _this$state3 = _this.state,\n          lastSnap = _this$state3.lastSnap,\n          modalHeight = _this$state3.modalHeight,\n          overlay = _this$state3.overlay;\n      var velocityY = nativeEvent.velocityY,\n          translationY = nativeEvent.translationY;\n      var enableBounces = devices_1.isAndroid ? false : _this.beginScrollYValue > 0 || translationY < 0;\n      var thresholdProps = translationY > (adjustToContentHeight ? (modalHeight || 0) / 3 : threshold) && _this.beginScrollYValue === 0;\n      var closeThreshold = velocity ? _this.beginScrollYValue <= 20 && velocityY >= velocity || thresholdProps : thresholdProps;\n\n      _this.setState({\n        enableBounces: enableBounces\n      });\n\n      if (nativeEvent.oldState === react_native_gesture_handler_1.State.BEGAN) {\n        if (_this.beginScrollYValue > 0) {\n          _this.translateY.setValue(0);\n\n          _this.dragY.setValue(0);\n\n          _this.cancelTranslateY.setValue(0);\n        } else {\n          _this.cancelTranslateY.setValue(1);\n        }\n      }\n\n      if (nativeEvent.oldState === react_native_gesture_handler_1.State.ACTIVE) {\n        var toValue = translationY - _this.beginScrollYValue;\n        var destSnapPoint = 0;\n\n        if (snapPoint || alwaysOpen) {\n          var endOffsetY = lastSnap + toValue + dragToss * velocityY;\n\n          _this.snaps.forEach(function (snap) {\n            var distFromSnap = Math.abs(snap - endOffsetY);\n\n            if (distFromSnap < Math.abs(destSnapPoint - endOffsetY)) {\n              destSnapPoint = snap;\n              _this.willCloseModalize = false;\n\n              if (alwaysOpen) {\n                destSnapPoint = (modalHeight || 0) - alwaysOpen;\n              }\n\n              if (snap === _this.snapEnd && !alwaysOpen) {\n                _this.willCloseModalize = true;\n\n                _this.close();\n              }\n            }\n          });\n        } else if (closeThreshold && !alwaysOpen) {\n          _this.willCloseModalize = true;\n\n          _this.close();\n        }\n\n        if (_this.willCloseModalize) {\n          return;\n        }\n\n        _this.setState({\n          lastSnap: destSnapPoint\n        });\n\n        _this.translateY.extractOffset();\n\n        _this.translateY.setValue(toValue);\n\n        _this.translateY.flattenOffset();\n\n        _this.dragY.setValue(0);\n\n        if (alwaysOpen) {\n          react_native_1.Animated.timing(overlay, {\n            toValue: Number(destSnapPoint <= 0),\n            duration: timing.duration,\n            easing: react_native_1.Easing.ease,\n            useNativeDriver: USE_NATIVE_DRIVER\n          }).start();\n        }\n\n        react_native_1.Animated.spring(_this.translateY, {\n          tension: 50,\n          friction: 12,\n          velocity: velocityY,\n          toValue: destSnapPoint,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n\n        if (_this.beginScrollYValue === 0) {\n          var modalPosition = Boolean(destSnapPoint <= 0) ? 'top' : 'initial';\n\n          if (panGestureAnimatedValue) {\n            react_native_1.Animated.timing(panGestureAnimatedValue, {\n              toValue: Number(modalPosition === 'top'),\n              duration: PAN_DURATION,\n              useNativeDriver: useNativeDriver\n            }).start();\n          }\n\n          if (!adjustToContentHeight && modalPosition === 'top') {\n            _this.setState({\n              disableScroll: false\n            });\n          }\n\n          if (onPositionChange && _this.modalPosition !== modalPosition) {\n            onPositionChange(modalPosition);\n          }\n\n          if (_this.modalPosition !== modalPosition) {\n            _this.modalPosition = modalPosition;\n          }\n        }\n      }\n    };\n\n    _this.onHandleOverlay = function (_ref5) {\n      var nativeEvent = _ref5.nativeEvent;\n      var _this$props6 = _this.props,\n          alwaysOpen = _this$props6.alwaysOpen,\n          onOverlayPress = _this$props6.onOverlayPress;\n\n      if (nativeEvent.oldState === react_native_gesture_handler_1.State.ACTIVE && !_this.willCloseModalize) {\n        if (onOverlayPress) {\n          onOverlayPress();\n        }\n\n        var dest = !!alwaysOpen ? 'alwaysOpen' : 'default';\n\n        _this.close(dest);\n      }\n    };\n\n    _this.onBackPress = function () {\n      var _this$props7 = _this.props,\n          onBackButtonPress = _this$props7.onBackButtonPress,\n          alwaysOpen = _this$props7.alwaysOpen;\n\n      if (alwaysOpen) {\n        return false;\n      }\n\n      if (onBackButtonPress) {\n        return onBackButtonPress();\n      } else {\n        _this.close();\n      }\n\n      return true;\n    };\n\n    _this.onKeyboardShow = function (event) {\n      var height = event.endCoordinates.height;\n\n      _this.setState({\n        keyboardToggle: true,\n        keyboardHeight: height\n      });\n    };\n\n    _this.onKeyboardHide = function () {\n      _this.setState({\n        keyboardToggle: false,\n        keyboardHeight: 0\n      });\n    };\n\n    _this.onGestureEvent = react_native_1.Animated.event([{\n      nativeEvent: {\n        translationY: _this.dragY\n      }\n    }], {\n      useNativeDriver: USE_NATIVE_DRIVER,\n      listener: function listener(_ref6) {\n        var translationY = _ref6.nativeEvent.translationY;\n        var panGestureAnimatedValue = _this.props.panGestureAnimatedValue;\n        var offset = 200;\n\n        if (panGestureAnimatedValue) {\n          var diff = Math.abs(translationY / (_this.initialComputedModalHeight - offset));\n          var y = translationY < 0 ? diff : 1 - diff;\n          var value;\n\n          if (_this.modalPosition === 'initial' && translationY > 0) {\n            value = 0;\n          } else if (_this.modalPosition === 'top' && translationY <= 0) {\n            value = 1;\n          } else {\n            value = y;\n          }\n\n          panGestureAnimatedValue.setValue(value);\n        }\n      }\n    });\n\n    _this.renderComponent = function (Tag) {\n      return React.isValidElement(Tag) ? Tag : React.createElement(Tag, null);\n    };\n\n    _this.renderHandle = function () {\n      var _this$props8 = _this.props,\n          handleStyle = _this$props8.handleStyle,\n          withHandle = _this$props8.withHandle,\n          panGestureEnabled = _this$props8.panGestureEnabled;\n      var handleStyles = [styles_1.default.handle];\n      var shapeStyles = [styles_1.default.handle__shape, handleStyle];\n\n      if (!withHandle) {\n        return null;\n      }\n\n      if (!_this.isHandleOutside) {\n        handleStyles.push(styles_1.default.handleBottom);\n        shapeStyles.push(styles_1.default.handle__shapeBottom, handleStyle);\n      }\n\n      return React.createElement(react_native_gesture_handler_1.PanGestureHandler, {\n        enabled: panGestureEnabled,\n        simultaneousHandlers: _this.modal,\n        shouldCancelWhenOutside: false,\n        onGestureEvent: _this.onGestureEvent,\n        onHandlerStateChange: _this.onHandleComponent\n      }, React.createElement(react_native_1.Animated.View, {\n        style: handleStyles\n      }, React.createElement(react_native_1.View, {\n        style: shapeStyles\n      })));\n    };\n\n    _this.renderHeader = function () {\n      var _this$props9 = _this.props,\n          HeaderComponent = _this$props9.HeaderComponent,\n          panGestureEnabled = _this$props9.panGestureEnabled;\n\n      if (!HeaderComponent) {\n        return null;\n      }\n\n      if (has_absolute_style_1.hasAbsoluteStyle(HeaderComponent)) {\n        return _this.renderComponent(HeaderComponent);\n      }\n\n      return React.createElement(react_native_gesture_handler_1.PanGestureHandler, {\n        enabled: panGestureEnabled,\n        simultaneousHandlers: _this.modal,\n        shouldCancelWhenOutside: false,\n        onGestureEvent: _this.onGestureEvent,\n        onHandlerStateChange: _this.onHandleComponent\n      }, React.createElement(react_native_1.Animated.View, {\n        style: styles_1.default.component\n      }, _this.renderComponent(HeaderComponent)));\n    };\n\n    _this.renderContent = function () {\n      var _this$props10 = _this.props,\n          children = _this$props10.children,\n          scrollViewProps = _this$props10.scrollViewProps,\n          flatListProps = _this$props10.flatListProps,\n          sectionListProps = _this$props10.sectionListProps;\n      var _this$state4 = _this.state,\n          enableBounces = _this$state4.enableBounces,\n          disableScroll = _this$state4.disableScroll,\n          keyboardToggle = _this$state4.keyboardToggle;\n      var keyboardDismissMode = devices_1.isIos ? 'interactive' : 'on-drag';\n      var opts = {\n        ref: _this.contentView,\n        bounces: enableBounces,\n        onScrollBeginDrag: react_native_1.Animated.event([{\n          nativeEvent: {\n            contentOffset: {\n              y: _this.beginScrollY\n            }\n          }\n        }], {\n          useNativeDriver: USE_NATIVE_DRIVER\n        }),\n        scrollEventThrottle: 16,\n        onLayout: _this.onContentViewLayout,\n        scrollEnabled: keyboardToggle || !disableScroll,\n        keyboardDismissMode: keyboardDismissMode\n      };\n\n      if (flatListProps) {\n        return React.createElement(AnimatedFlatList, _extends({}, opts, flatListProps));\n      }\n\n      if (sectionListProps) {\n        return React.createElement(AnimatedSectionList, _extends({}, opts, sectionListProps));\n      }\n\n      return React.createElement(react_native_1.Animated.ScrollView, _extends({}, opts, scrollViewProps), children);\n    };\n\n    _this.renderChildren = function () {\n      var _this$props11 = _this.props,\n          adjustToContentHeight = _this$props11.adjustToContentHeight,\n          panGestureEnabled = _this$props11.panGestureEnabled;\n      var style = adjustToContentHeight ? styles_1.default.content__adjustHeight : styles_1.default.content__container;\n      return React.createElement(react_native_gesture_handler_1.PanGestureHandler, {\n        ref: _this.modalChildren,\n        enabled: panGestureEnabled,\n        simultaneousHandlers: [_this.modalContentView, _this.modal],\n        shouldCancelWhenOutside: false,\n        onGestureEvent: _this.onGestureEvent,\n        minDist: ACTIVATED,\n        activeOffsetY: ACTIVATED,\n        activeOffsetX: ACTIVATED,\n        onHandlerStateChange: _this.onHandleChildren\n      }, React.createElement(react_native_1.Animated.View, {\n        style: style\n      }, React.createElement(react_native_gesture_handler_1.NativeViewGestureHandler, {\n        ref: _this.modalContentView,\n        waitFor: _this.modal,\n        simultaneousHandlers: _this.modalChildren\n      }, _this.renderContent())));\n    };\n\n    _this.renderFooter = function () {\n      var FooterComponent = _this.props.FooterComponent;\n\n      if (!FooterComponent) {\n        return null;\n      }\n\n      return _this.renderComponent(FooterComponent);\n    };\n\n    _this.renderFloatingComponent = function () {\n      var FloatingComponent = _this.props.FloatingComponent;\n\n      if (!FloatingComponent) {\n        return null;\n      }\n\n      return _this.renderComponent(FloatingComponent);\n    };\n\n    _this.renderOverlay = function () {\n      var _this$props12 = _this.props,\n          overlayStyle = _this$props12.overlayStyle,\n          alwaysOpen = _this$props12.alwaysOpen,\n          panGestureEnabled = _this$props12.panGestureEnabled,\n          closeOnOverlayTap = _this$props12.closeOnOverlayTap;\n      var showContent = _this.state.showContent;\n      var pointerEvents = alwaysOpen && (_this.modalPosition === 'initial' || !_this.modalPosition) ? 'box-none' : 'auto';\n      return React.createElement(react_native_gesture_handler_1.PanGestureHandler, {\n        ref: _this.modalOverlay,\n        enabled: panGestureEnabled,\n        simultaneousHandlers: [_this.modal],\n        shouldCancelWhenOutside: false,\n        onGestureEvent: _this.onGestureEvent,\n        onHandlerStateChange: _this.onHandleChildren\n      }, React.createElement(react_native_1.Animated.View, {\n        style: styles_1.default.overlay,\n        pointerEvents: pointerEvents\n      }, showContent && React.createElement(react_native_gesture_handler_1.TapGestureHandler, {\n        ref: _this.modalOverlayTap,\n        enabled: panGestureEnabled || closeOnOverlayTap,\n        onHandlerStateChange: _this.onHandleOverlay\n      }, React.createElement(react_native_1.Animated.View, {\n        style: [styles_1.default.overlay__background, overlayStyle, _this.overlayBackground],\n        pointerEvents: pointerEvents\n      }))));\n    };\n\n    _this.renderModalize = function () {\n      var _this$props13 = _this.props,\n          keyboardAvoidingOffset = _this$props13.keyboardAvoidingOffset,\n          modalStyle = _this$props13.modalStyle,\n          keyboardAvoidingBehavior = _this$props13.keyboardAvoidingBehavior,\n          alwaysOpen = _this$props13.alwaysOpen,\n          panGestureEnabled = _this$props13.panGestureEnabled,\n          avoidKeyboardLikeIOS = _this$props13.avoidKeyboardLikeIOS,\n          adjustToContentHeight = _this$props13.adjustToContentHeight,\n          elevation = _this$props13.modalElevation,\n          withOverlay = _this$props13.withOverlay;\n      var _this$state5 = _this.state,\n          isVisible = _this$state5.isVisible,\n          lastSnap = _this$state5.lastSnap,\n          showContent = _this$state5.showContent;\n      var pointerEvents = alwaysOpen || !withOverlay ? 'box-none' : 'auto';\n      var keyboardAvoidingViewProps = {\n        keyboardVerticalOffset: keyboardAvoidingOffset,\n        behavior: keyboardAvoidingBehavior || 'padding',\n        enabled: avoidKeyboardLikeIOS,\n        style: [styles_1.default.modalize__content, _this.modalizeContent, modalStyle]\n      };\n\n      if (!avoidKeyboardLikeIOS && !adjustToContentHeight) {\n        keyboardAvoidingViewProps.onLayout = _this.onModalizeContentLayout;\n      }\n\n      if (!isVisible) {\n        return null;\n      }\n\n      return React.createElement(GestureHandlerWrapper, {\n        style: [styles_1.default.modalize, {\n          elevation: elevation\n        }],\n        pointerEvents: pointerEvents\n      }, React.createElement(react_native_gesture_handler_1.TapGestureHandler, {\n        ref: _this.modal,\n        maxDurationMs: 100000,\n        maxDeltaY: lastSnap,\n        enabled: panGestureEnabled\n      }, React.createElement(react_native_1.View, {\n        style: styles_1.default.modalize__wrapper,\n        pointerEvents: \"box-none\"\n      }, showContent && React.createElement(AnimatedKeyboardAvoidingView, _extends({}, keyboardAvoidingViewProps), _this.renderHandle(), _this.renderHeader(), _this.renderChildren(), _this.renderFooter()), withOverlay && _this.renderOverlay())), _this.renderFloatingComponent());\n    };\n\n    _this.renderReactModal = function (child) {\n      var isVisible = _this.state.isVisible;\n      return React.createElement(react_native_1.Modal, {\n        supportedOrientations: ['landscape', 'portrait', 'portrait-upside-down'],\n        onRequestClose: _this.onBackPress,\n        hardwareAccelerated: USE_NATIVE_DRIVER,\n        visible: isVisible,\n        transparent: true\n      }, child);\n    };\n\n    var fullHeight = screenHeight - props.modalTopOffset;\n    var computedHeight = fullHeight - _this.handleHeight - (devices_1.isIphoneX ? 34 : 0);\n    var modalHeight = props.modalHeight || computedHeight;\n    _this.initialComputedModalHeight = modalHeight;\n\n    if (props.modalHeight && props.adjustToContentHeight) {\n      console.error(\"[react-native-modalize] You can't use both 'modalHeight' and 'adjustToContentHeight' props at the same time. Only choose one of the two.\");\n    }\n\n    if ((props.scrollViewProps || props.children) && props.flatListProps) {\n      console.error(\"[react-native-modalize] You have defined 'flatListProps' along with 'scrollViewProps' or 'children' props. Remove 'scrollViewProps' or 'children' or 'flatListProps' to fix the error.\");\n    }\n\n    if ((props.scrollViewProps || props.children) && props.sectionListProps) {\n      console.error(\"[react-native-modalize] You have defined 'sectionListProps'  along with 'scrollViewProps' or 'children' props. Remove 'scrollViewProps' or 'children' or 'sectionListProps' to fix the error.\");\n    }\n\n    if (props.snapPoint) {\n      _this.snaps.push(0, modalHeight - props.snapPoint, modalHeight);\n    } else {\n      _this.snaps.push(0, modalHeight);\n    }\n\n    _this.snapEnd = _this.snaps[_this.snaps.length - 1];\n    _this.state = {\n      lastSnap: props.snapPoint ? modalHeight - props.snapPoint : 0,\n      isVisible: false,\n      showContent: true,\n      overlay: new react_native_1.Animated.Value(0),\n      modalHeight: props.adjustToContentHeight ? undefined : modalHeight,\n      contentHeight: 0,\n      enableBounces: true,\n      keyboardToggle: false,\n      keyboardHeight: 0,\n      disableScroll: props.alwaysOpen ? true : undefined\n    };\n\n    _this.beginScrollY.addListener(function (_ref7) {\n      var value = _ref7.value;\n      return _this.beginScrollYValue = value;\n    });\n\n    _this.reverseBeginScrollY = react_native_1.Animated.multiply(new react_native_1.Animated.Value(-1), _this.beginScrollY);\n    return _this;\n  }\n\n  _createClass(Modalize, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var alwaysOpen = this.props.alwaysOpen;\n\n      if (alwaysOpen) {\n        this.onAnimateOpen(alwaysOpen);\n      }\n\n      react_native_1.Keyboard.addListener('keyboardDidShow', this.onKeyboardShow);\n      react_native_1.Keyboard.addListener('keyboardDidHide', this.onKeyboardHide);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref8) {\n      var adjustToContentHeight = _ref8.adjustToContentHeight;\n      var nextAdjust = this.props.adjustToContentHeight;\n\n      if (nextAdjust !== adjustToContentHeight) {\n        this.setState({\n          modalHeight: nextAdjust ? undefined : this.initialComputedModalHeight\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      react_native_1.BackHandler.removeEventListener('hardwareBackPress', this.onBackPress);\n      react_native_1.Keyboard.removeListener('keyboardDidShow', this.onKeyboardShow);\n      react_native_1.Keyboard.removeListener('keyboardDidHide', this.onKeyboardHide);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var withReactModal = this.props.withReactModal;\n\n      if (withReactModal) {\n        return this.renderReactModal(this.renderModalize());\n      }\n\n      return this.renderModalize();\n    }\n  }, {\n    key: \"isHandleOutside\",\n    get: function get() {\n      var handlePosition = this.props.handlePosition;\n      return handlePosition === 'outside';\n    }\n  }, {\n    key: \"handleHeight\",\n    get: function get() {\n      var withHandle = this.props.withHandle;\n\n      if (!withHandle) {\n        return 20;\n      }\n\n      return this.isHandleOutside ? 35 : 20;\n    }\n  }, {\n    key: \"modalizeContent\",\n    get: function get() {\n      var _this2 = this;\n\n      var modalHeight = this.state.modalHeight;\n\n      var cancelTranslateY = function cancelTranslateY(ref) {\n        return react_native_1.Animated.multiply(ref, _this2.cancelTranslateY);\n      };\n\n      var diffClamp = react_native_1.Animated.diffClamp(this.reverseBeginScrollY, -screenHeight, 0);\n      var dragY = react_native_1.Animated.add(cancelTranslateY(this.dragY), diffClamp);\n      var value = react_native_1.Animated.add(cancelTranslateY(this.translateY), dragY);\n      return {\n        height: modalHeight,\n        maxHeight: this.initialComputedModalHeight,\n        transform: [{\n          translateY: value.interpolate({\n            inputRange: [-40, 0, this.snapEnd],\n            outputRange: [0, 0, this.snapEnd],\n            extrapolate: 'clamp'\n          })\n        }]\n      };\n    }\n  }, {\n    key: \"overlayBackground\",\n    get: function get() {\n      var overlay = this.state.overlay;\n      return {\n        opacity: overlay.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1]\n        })\n      };\n    }\n  }]);\n\n  return Modalize;\n}(React.Component);\n\nexports.Modalize = Modalize;\nModalize.defaultProps = {\n  handlePosition: 'outside',\n  useNativeDriver: true,\n  adjustToContentHeight: false,\n  disableScrollIfPossible: true,\n  avoidKeyboardLikeIOS: react_native_1.Platform.select({\n    ios: true,\n    android: false,\n    default: true\n  }),\n  modalTopOffset: react_native_1.Platform.select({\n    ios: 0,\n    android: react_native_1.StatusBar.currentHeight || 0,\n    default: 0\n  }),\n  panGestureEnabled: true,\n  closeOnOverlayTap: true,\n  withReactModal: false,\n  withHandle: true,\n  withOverlay: true,\n  openAnimationConfig: {\n    timing: {\n      duration: 280,\n      easing: react_native_1.Easing.ease\n    },\n    spring: {\n      speed: 14,\n      bounciness: 4\n    }\n  },\n  closeAnimationConfig: {\n    timing: {\n      duration: 280,\n      easing: react_native_1.Easing.ease\n    }\n  },\n  dragToss: 0.05,\n  threshold: 120,\n  velocity: 2800\n};","map":{"version":3,"sources":["/home/zd/projects/trashgrav-SEPM/ReactNative/node_modules/react-native-modalize/lib/index.js"],"names":["Object","defineProperty","exports","value","React","require","react_native_gesture_handler_1","get_spring_config_1","devices_1","has_absolute_style_1","styles_1","react_native_1","Dimensions","get","screenHeight","height","AnimatedKeyboardAvoidingView","Animated","createAnimatedComponent","KeyboardAvoidingView","AnimatedFlatList","FlatList","AnimatedSectionList","SectionList","GestureHandlerWrapper","GestureHandlerRootView","View","USE_NATIVE_DRIVER","ACTIVATED","PAN_DURATION","Modalize","props","snaps","cancelTranslateY","Value","beginScrollYValue","beginScrollY","dragY","translateY","modal","createRef","modalChildren","modalContentView","contentView","modalOverlay","modalOverlayTap","willCloseModalize","initialComputedModalHeight","open","dest","onOpen","alwaysOpen","onAnimateOpen","close","onClose","onAnimateClose","scrollTo","current","ref","scrollResponder","getScrollResponder","getNode","scrollToIndex","flatListProps","console","error","onOpened","snapPoint","useNativeDriver","openAnimationConfig","onPositionChange","panGestureAnimatedValue","timing","spring","state","overlay","modalHeight","BackHandler","addEventListener","onBackPress","toValue","toPanValue","setState","isVisible","showContent","modalPosition","parallel","duration","easing","Easing","ease","delay","getSpringConfig","start","onClosed","closeAnimationConfig","lastSnap","toInitialAlwaysOpen","Boolean","removeEventListener","setValue","out","onModalizeContentLayout","layout","nativeEvent","adjustToContentHeight","keyboardHeight","Math","min","y","Platform","select","ios","android","onContentViewLayout","disableScrollIfPossible","onLayout","shorterHeight","disableScroll","onHandleComponent","oldState","State","BEGAN","onHandleChildren","dragToss","threshold","velocity","velocityY","translationY","enableBounces","isAndroid","thresholdProps","closeThreshold","ACTIVE","destSnapPoint","endOffsetY","forEach","snap","distFromSnap","abs","snapEnd","extractOffset","flattenOffset","Number","tension","friction","onHandleOverlay","onOverlayPress","onBackButtonPress","onKeyboardShow","event","endCoordinates","keyboardToggle","onKeyboardHide","onGestureEvent","listener","offset","diff","renderComponent","Tag","isValidElement","createElement","renderHandle","handleStyle","withHandle","panGestureEnabled","handleStyles","default","handle","shapeStyles","handle__shape","isHandleOutside","push","handleBottom","handle__shapeBottom","PanGestureHandler","enabled","simultaneousHandlers","shouldCancelWhenOutside","onHandlerStateChange","style","renderHeader","HeaderComponent","hasAbsoluteStyle","component","renderContent","children","scrollViewProps","sectionListProps","keyboardDismissMode","isIos","opts","bounces","onScrollBeginDrag","contentOffset","scrollEventThrottle","scrollEnabled","ScrollView","renderChildren","content__adjustHeight","content__container","minDist","activeOffsetY","activeOffsetX","NativeViewGestureHandler","waitFor","renderFooter","FooterComponent","renderFloatingComponent","FloatingComponent","renderOverlay","overlayStyle","closeOnOverlayTap","pointerEvents","TapGestureHandler","overlay__background","overlayBackground","renderModalize","keyboardAvoidingOffset","modalStyle","keyboardAvoidingBehavior","avoidKeyboardLikeIOS","elevation","modalElevation","withOverlay","keyboardAvoidingViewProps","keyboardVerticalOffset","behavior","modalize__content","modalizeContent","modalize","maxDurationMs","maxDeltaY","modalize__wrapper","renderReactModal","child","Modal","supportedOrientations","onRequestClose","hardwareAccelerated","visible","transparent","fullHeight","modalTopOffset","computedHeight","handleHeight","isIphoneX","length","undefined","contentHeight","addListener","reverseBeginScrollY","multiply","Keyboard","nextAdjust","removeListener","withReactModal","handlePosition","diffClamp","add","maxHeight","transform","interpolate","inputRange","outputRange","extrapolate","opacity","Component","defaultProps","StatusBar","currentHeight","speed","bounciness"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst react_native_1 = require(\"react-native\");\nconst react_native_gesture_handler_1 = require(\"react-native-gesture-handler\");\nconst get_spring_config_1 = require(\"./utils/get-spring-config\");\nconst devices_1 = require(\"./utils/devices\");\nconst has_absolute_style_1 = require(\"./utils/has-absolute-style\");\nconst styles_1 = require(\"./styles\");\nconst { height: screenHeight } = react_native_1.Dimensions.get('window');\nconst AnimatedKeyboardAvoidingView = react_native_1.Animated.createAnimatedComponent(react_native_1.KeyboardAvoidingView);\nconst AnimatedFlatList = react_native_1.Animated.createAnimatedComponent(react_native_1.FlatList);\nconst AnimatedSectionList = react_native_1.Animated.createAnimatedComponent(react_native_1.SectionList);\nconst GestureHandlerWrapper = react_native_gesture_handler_1.GestureHandlerRootView !== null && react_native_gesture_handler_1.GestureHandlerRootView !== void 0 ? react_native_gesture_handler_1.GestureHandlerRootView : react_native_1.View;\nconst USE_NATIVE_DRIVER = true;\nconst ACTIVATED = 20;\nconst PAN_DURATION = 150;\nclass Modalize extends React.Component {\n    constructor(props) {\n        super(props);\n        this.snaps = [];\n        this.cancelTranslateY = new react_native_1.Animated.Value(1); // 1 by default to have the translateY animation running\n        this.beginScrollYValue = 0;\n        this.beginScrollY = new react_native_1.Animated.Value(0);\n        this.dragY = new react_native_1.Animated.Value(0);\n        this.translateY = new react_native_1.Animated.Value(screenHeight);\n        this.modal = React.createRef();\n        this.modalChildren = React.createRef();\n        this.modalContentView = React.createRef();\n        this.contentView = React.createRef();\n        this.modalOverlay = React.createRef();\n        this.modalOverlayTap = React.createRef();\n        this.willCloseModalize = false;\n        this.initialComputedModalHeight = 0;\n        this.open = (dest) => {\n            const { onOpen, alwaysOpen } = this.props;\n            if (onOpen) {\n                onOpen();\n            }\n            this.onAnimateOpen(alwaysOpen, dest);\n        };\n        this.close = (dest) => {\n            const { onClose } = this.props;\n            if (onClose) {\n                onClose();\n            }\n            this.onAnimateClose(dest);\n        };\n        this.scrollTo = (...args) => {\n            if (this.contentView.current) {\n                const ref = this.contentView.current;\n                // since RN 0.62 the getNode call has been deprecated\n                const scrollResponder = ref.getScrollResponder\n                    ? ref.getScrollResponder()\n                    : ref.getNode().getScrollResponder();\n                scrollResponder.scrollTo(...args);\n            }\n        };\n        this.scrollToIndex = (...args) => {\n            const { flatListProps } = this.props;\n            if (!flatListProps) {\n                return console.error(`[react-native-modalize] You can't use the 'scrollToIndex' method with something else than the FlatList component.`);\n            }\n            if (this.contentView.current) {\n                const ref = this.contentView.current;\n                ref.getNode().scrollToIndex(...args);\n            }\n        };\n        this.onAnimateOpen = (alwaysOpen, dest = 'default') => {\n            const { onOpened, snapPoint, useNativeDriver, openAnimationConfig, onPositionChange, panGestureAnimatedValue, } = this.props;\n            const { timing, spring } = openAnimationConfig;\n            const { overlay, modalHeight } = this.state;\n            react_native_1.BackHandler.addEventListener('hardwareBackPress', this.onBackPress);\n            let toValue = 0;\n            let toPanValue = 0;\n            if (dest === 'top') {\n                toValue = 0;\n            }\n            else if (alwaysOpen) {\n                toValue = (modalHeight || 0) - alwaysOpen;\n            }\n            else if (snapPoint) {\n                toValue = (modalHeight || 0) - snapPoint;\n            }\n            if (panGestureAnimatedValue && (alwaysOpen || snapPoint)) {\n                toPanValue = 0;\n            }\n            else if (panGestureAnimatedValue && !alwaysOpen && (dest === 'top' || dest === 'default')) {\n                toPanValue = 1;\n            }\n            this.setState({\n                isVisible: true,\n                showContent: true,\n            });\n            if ((alwaysOpen && dest !== 'top') || (snapPoint && dest === 'default')) {\n                this.modalPosition = 'initial';\n            }\n            else {\n                this.modalPosition = 'top';\n            }\n            react_native_1.Animated.parallel([\n                react_native_1.Animated.timing(overlay, {\n                    toValue: alwaysOpen && dest === 'default' ? 0 : 1,\n                    duration: timing.duration,\n                    easing: react_native_1.Easing.ease,\n                    useNativeDriver: USE_NATIVE_DRIVER,\n                }),\n                panGestureAnimatedValue\n                    ? react_native_1.Animated.timing(panGestureAnimatedValue, {\n                        toValue: toPanValue,\n                        duration: PAN_DURATION,\n                        useNativeDriver,\n                    })\n                    : react_native_1.Animated.delay(0),\n                spring\n                    ? react_native_1.Animated.spring(this.translateY, Object.assign(Object.assign({}, get_spring_config_1.getSpringConfig(spring)), { toValue, useNativeDriver: USE_NATIVE_DRIVER }))\n                    : react_native_1.Animated.timing(this.translateY, {\n                        toValue,\n                        duration: timing.duration,\n                        easing: timing.easing,\n                        useNativeDriver: USE_NATIVE_DRIVER,\n                    }),\n            ]).start(() => {\n                if (onOpened) {\n                    onOpened();\n                }\n                if (onPositionChange) {\n                    onPositionChange(this.modalPosition);\n                }\n            });\n        };\n        this.onAnimateClose = (dest = 'default') => {\n            const { onClosed, useNativeDriver, snapPoint, closeAnimationConfig, alwaysOpen, onPositionChange, panGestureAnimatedValue, } = this.props;\n            const { timing, spring } = closeAnimationConfig;\n            const { overlay, modalHeight } = this.state;\n            const lastSnap = snapPoint ? this.snaps[1] : 80;\n            const toInitialAlwaysOpen = dest === 'alwaysOpen' && Boolean(alwaysOpen);\n            const toValue = toInitialAlwaysOpen ? (modalHeight || 0) - alwaysOpen : screenHeight;\n            react_native_1.BackHandler.removeEventListener('hardwareBackPress', this.onBackPress);\n            this.beginScrollYValue = 0;\n            this.beginScrollY.setValue(0);\n            react_native_1.Animated.parallel([\n                react_native_1.Animated.timing(overlay, {\n                    toValue: 0,\n                    duration: timing.duration,\n                    easing: react_native_1.Easing.ease,\n                    useNativeDriver: USE_NATIVE_DRIVER,\n                }),\n                panGestureAnimatedValue\n                    ? react_native_1.Animated.timing(panGestureAnimatedValue, {\n                        toValue: 0,\n                        duration: PAN_DURATION,\n                        useNativeDriver,\n                    })\n                    : react_native_1.Animated.delay(0),\n                spring\n                    ? react_native_1.Animated.spring(this.translateY, Object.assign(Object.assign({}, get_spring_config_1.getSpringConfig(spring)), { toValue, useNativeDriver: USE_NATIVE_DRIVER }))\n                    : react_native_1.Animated.timing(this.translateY, {\n                        duration: timing.duration,\n                        easing: react_native_1.Easing.out(react_native_1.Easing.ease),\n                        toValue,\n                        useNativeDriver: USE_NATIVE_DRIVER,\n                    }),\n            ]).start(() => {\n                if (onClosed) {\n                    onClosed();\n                }\n                if (alwaysOpen && dest === 'alwaysOpen' && onPositionChange) {\n                    onPositionChange('initial');\n                }\n                if (alwaysOpen && dest === 'alwaysOpen') {\n                    this.modalPosition = 'initial';\n                }\n                this.setState({ showContent: toInitialAlwaysOpen });\n                this.translateY.setValue(toValue);\n                this.dragY.setValue(0);\n                this.willCloseModalize = false;\n                this.setState({\n                    lastSnap,\n                    isVisible: toInitialAlwaysOpen,\n                });\n            });\n        };\n        this.onModalizeContentLayout = ({ nativeEvent: { layout } }) => {\n            const { adjustToContentHeight } = this.props;\n            const { keyboardHeight } = this.state;\n            this.setState({\n                modalHeight: Math.min(layout.height + (!adjustToContentHeight || keyboardHeight ? layout.y : 0), this.initialComputedModalHeight -\n                    react_native_1.Platform.select({\n                        ios: 0,\n                        android: keyboardHeight,\n                    })),\n            });\n        };\n        this.onContentViewLayout = ({ nativeEvent }) => {\n            const { adjustToContentHeight, disableScrollIfPossible, onLayout } = this.props;\n            if (onLayout) {\n                onLayout(nativeEvent);\n            }\n            if (!adjustToContentHeight) {\n                return;\n            }\n            const { height } = nativeEvent.layout;\n            const shorterHeight = height < this.initialComputedModalHeight;\n            const disableScroll = shorterHeight && disableScrollIfPossible;\n            this.setState({ disableScroll });\n        };\n        this.onHandleComponent = ({ nativeEvent }) => {\n            if (nativeEvent.oldState === react_native_gesture_handler_1.State.BEGAN) {\n                this.beginScrollY.setValue(0);\n            }\n            this.onHandleChildren({ nativeEvent });\n        };\n        this.onHandleChildren = ({ nativeEvent }) => {\n            const { snapPoint, useNativeDriver, adjustToContentHeight, alwaysOpen, closeAnimationConfig, dragToss, onPositionChange, panGestureAnimatedValue, threshold, velocity, } = this.props;\n            const { timing } = closeAnimationConfig;\n            const { lastSnap, modalHeight, overlay } = this.state;\n            const { velocityY, translationY } = nativeEvent;\n            const enableBounces = devices_1.isAndroid ? false : this.beginScrollYValue > 0 || translationY < 0;\n            const thresholdProps = translationY > (adjustToContentHeight ? (modalHeight || 0) / 3 : threshold) &&\n                this.beginScrollYValue === 0;\n            const closeThreshold = velocity\n                ? (this.beginScrollYValue <= 20 && velocityY >= velocity) || thresholdProps\n                : thresholdProps;\n            this.setState({ enableBounces });\n            /*\n             * When the pan gesture began we check the position of the scrollview \"cursor\".\n             * We cancel the translation animation if the scrolview is not scrolled to the top\n             */\n            if (nativeEvent.oldState === react_native_gesture_handler_1.State.BEGAN) {\n                if (this.beginScrollYValue > 0) {\n                    this.translateY.setValue(0);\n                    this.dragY.setValue(0);\n                    this.cancelTranslateY.setValue(0);\n                }\n                else {\n                    this.cancelTranslateY.setValue(1);\n                }\n            }\n            if (nativeEvent.oldState === react_native_gesture_handler_1.State.ACTIVE) {\n                const toValue = translationY - this.beginScrollYValue;\n                let destSnapPoint = 0;\n                if (snapPoint || alwaysOpen) {\n                    const endOffsetY = lastSnap + toValue + dragToss * velocityY;\n                    this.snaps.forEach((snap) => {\n                        const distFromSnap = Math.abs(snap - endOffsetY);\n                        if (distFromSnap < Math.abs(destSnapPoint - endOffsetY)) {\n                            destSnapPoint = snap;\n                            this.willCloseModalize = false;\n                            if (alwaysOpen) {\n                                destSnapPoint = (modalHeight || 0) - alwaysOpen;\n                            }\n                            if (snap === this.snapEnd && !alwaysOpen) {\n                                this.willCloseModalize = true;\n                                this.close();\n                            }\n                        }\n                    });\n                }\n                else if (closeThreshold && !alwaysOpen) {\n                    this.willCloseModalize = true;\n                    this.close();\n                }\n                if (this.willCloseModalize) {\n                    return;\n                }\n                this.setState({ lastSnap: destSnapPoint });\n                this.translateY.extractOffset();\n                this.translateY.setValue(toValue);\n                this.translateY.flattenOffset();\n                this.dragY.setValue(0);\n                if (alwaysOpen) {\n                    react_native_1.Animated.timing(overlay, {\n                        toValue: Number(destSnapPoint <= 0),\n                        duration: timing.duration,\n                        easing: react_native_1.Easing.ease,\n                        useNativeDriver: USE_NATIVE_DRIVER,\n                    }).start();\n                }\n                react_native_1.Animated.spring(this.translateY, {\n                    tension: 50,\n                    friction: 12,\n                    velocity: velocityY,\n                    toValue: destSnapPoint,\n                    useNativeDriver: USE_NATIVE_DRIVER,\n                }).start();\n                if (this.beginScrollYValue === 0) {\n                    const modalPosition = Boolean(destSnapPoint <= 0) ? 'top' : 'initial';\n                    if (panGestureAnimatedValue) {\n                        react_native_1.Animated.timing(panGestureAnimatedValue, {\n                            toValue: Number(modalPosition === 'top'),\n                            duration: PAN_DURATION,\n                            useNativeDriver,\n                        }).start();\n                    }\n                    if (!adjustToContentHeight && modalPosition === 'top') {\n                        this.setState({ disableScroll: false });\n                    }\n                    if (onPositionChange && this.modalPosition !== modalPosition) {\n                        onPositionChange(modalPosition);\n                    }\n                    if (this.modalPosition !== modalPosition) {\n                        this.modalPosition = modalPosition;\n                    }\n                }\n            }\n        };\n        this.onHandleOverlay = ({ nativeEvent }) => {\n            const { alwaysOpen, onOverlayPress } = this.props;\n            if (nativeEvent.oldState === react_native_gesture_handler_1.State.ACTIVE && !this.willCloseModalize) {\n                if (onOverlayPress) {\n                    onOverlayPress();\n                }\n                const dest = !!alwaysOpen ? 'alwaysOpen' : 'default';\n                this.close(dest);\n            }\n        };\n        this.onBackPress = () => {\n            const { onBackButtonPress, alwaysOpen } = this.props;\n            if (alwaysOpen) {\n                return false;\n            }\n            if (onBackButtonPress) {\n                return onBackButtonPress();\n            }\n            else {\n                this.close();\n            }\n            return true;\n        };\n        this.onKeyboardShow = (event) => {\n            const { height } = event.endCoordinates;\n            this.setState({ keyboardToggle: true, keyboardHeight: height });\n        };\n        this.onKeyboardHide = () => {\n            this.setState({ keyboardToggle: false, keyboardHeight: 0 });\n        };\n        this.onGestureEvent = react_native_1.Animated.event([{ nativeEvent: { translationY: this.dragY } }], {\n            useNativeDriver: USE_NATIVE_DRIVER,\n            listener: ({ nativeEvent: { translationY } }) => {\n                const { panGestureAnimatedValue } = this.props;\n                const offset = 200;\n                if (panGestureAnimatedValue) {\n                    const diff = Math.abs(translationY / (this.initialComputedModalHeight - offset));\n                    const y = translationY < 0 ? diff : 1 - diff;\n                    let value;\n                    if (this.modalPosition === 'initial' && translationY > 0) {\n                        value = 0;\n                    }\n                    else if (this.modalPosition === 'top' && translationY <= 0) {\n                        value = 1;\n                    }\n                    else {\n                        value = y;\n                    }\n                    panGestureAnimatedValue.setValue(value);\n                }\n            },\n        });\n        this.renderComponent = (Tag) => {\n            return React.isValidElement(Tag) ? (Tag) : (\n            // @ts-ignore\n            React.createElement(Tag, null));\n        };\n        this.renderHandle = () => {\n            const { handleStyle, withHandle, panGestureEnabled } = this.props;\n            const handleStyles = [styles_1.default.handle];\n            const shapeStyles = [styles_1.default.handle__shape, handleStyle];\n            if (!withHandle) {\n                return null;\n            }\n            if (!this.isHandleOutside) {\n                handleStyles.push(styles_1.default.handleBottom);\n                shapeStyles.push(styles_1.default.handle__shapeBottom, handleStyle);\n            }\n            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { enabled: panGestureEnabled, simultaneousHandlers: this.modal, shouldCancelWhenOutside: false, onGestureEvent: this.onGestureEvent, onHandlerStateChange: this.onHandleComponent },\n                React.createElement(react_native_1.Animated.View, { style: handleStyles },\n                    React.createElement(react_native_1.View, { style: shapeStyles }))));\n        };\n        this.renderHeader = () => {\n            const { HeaderComponent, panGestureEnabled } = this.props;\n            if (!HeaderComponent) {\n                return null;\n            }\n            if (has_absolute_style_1.hasAbsoluteStyle(HeaderComponent)) {\n                return this.renderComponent(HeaderComponent);\n            }\n            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { enabled: panGestureEnabled, simultaneousHandlers: this.modal, shouldCancelWhenOutside: false, onGestureEvent: this.onGestureEvent, onHandlerStateChange: this.onHandleComponent },\n                React.createElement(react_native_1.Animated.View, { style: styles_1.default.component }, this.renderComponent(HeaderComponent))));\n        };\n        this.renderContent = () => {\n            const { children, scrollViewProps, flatListProps, sectionListProps } = this.props;\n            const { enableBounces, disableScroll, keyboardToggle } = this.state;\n            const keyboardDismissMode = devices_1.isIos ? 'interactive' : 'on-drag';\n            const opts = {\n                ref: this.contentView,\n                bounces: enableBounces,\n                onScrollBeginDrag: react_native_1.Animated.event([{ nativeEvent: { contentOffset: { y: this.beginScrollY } } }], { useNativeDriver: USE_NATIVE_DRIVER }),\n                scrollEventThrottle: 16,\n                onLayout: this.onContentViewLayout,\n                scrollEnabled: keyboardToggle || !disableScroll,\n                keyboardDismissMode,\n            };\n            if (flatListProps) {\n                return React.createElement(AnimatedFlatList, Object.assign({}, opts, flatListProps));\n            }\n            if (sectionListProps) {\n                return React.createElement(AnimatedSectionList, Object.assign({}, opts, sectionListProps));\n            }\n            return (React.createElement(react_native_1.Animated.ScrollView, Object.assign({}, opts, scrollViewProps), children));\n        };\n        this.renderChildren = () => {\n            const { adjustToContentHeight, panGestureEnabled } = this.props;\n            const style = adjustToContentHeight ? styles_1.default.content__adjustHeight : styles_1.default.content__container;\n            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { ref: this.modalChildren, enabled: panGestureEnabled, simultaneousHandlers: [this.modalContentView, this.modal], shouldCancelWhenOutside: false, onGestureEvent: this.onGestureEvent, minDist: ACTIVATED, activeOffsetY: ACTIVATED, activeOffsetX: ACTIVATED, onHandlerStateChange: this.onHandleChildren },\n                React.createElement(react_native_1.Animated.View, { style: style },\n                    React.createElement(react_native_gesture_handler_1.NativeViewGestureHandler, { ref: this.modalContentView, waitFor: this.modal, simultaneousHandlers: this.modalChildren }, this.renderContent()))));\n        };\n        this.renderFooter = () => {\n            const { FooterComponent } = this.props;\n            if (!FooterComponent) {\n                return null;\n            }\n            return this.renderComponent(FooterComponent);\n        };\n        this.renderFloatingComponent = () => {\n            const { FloatingComponent } = this.props;\n            if (!FloatingComponent) {\n                return null;\n            }\n            return this.renderComponent(FloatingComponent);\n        };\n        this.renderOverlay = () => {\n            const { overlayStyle, alwaysOpen, panGestureEnabled, closeOnOverlayTap } = this.props;\n            const { showContent } = this.state;\n            const pointerEvents = alwaysOpen && (this.modalPosition === 'initial' || !this.modalPosition) ? 'box-none' : 'auto';\n            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { ref: this.modalOverlay, enabled: panGestureEnabled, simultaneousHandlers: [this.modal], shouldCancelWhenOutside: false, onGestureEvent: this.onGestureEvent, onHandlerStateChange: this.onHandleChildren },\n                React.createElement(react_native_1.Animated.View, { style: styles_1.default.overlay, pointerEvents: pointerEvents }, showContent && (React.createElement(react_native_gesture_handler_1.TapGestureHandler, { ref: this.modalOverlayTap, enabled: panGestureEnabled || closeOnOverlayTap, onHandlerStateChange: this.onHandleOverlay },\n                    React.createElement(react_native_1.Animated.View, { style: [styles_1.default.overlay__background, overlayStyle, this.overlayBackground], pointerEvents: pointerEvents }))))));\n        };\n        this.renderModalize = () => {\n            const { keyboardAvoidingOffset, modalStyle, keyboardAvoidingBehavior, alwaysOpen, panGestureEnabled, avoidKeyboardLikeIOS, adjustToContentHeight, modalElevation: elevation, withOverlay, } = this.props;\n            const { isVisible, lastSnap, showContent } = this.state;\n            const pointerEvents = alwaysOpen || !withOverlay ? 'box-none' : 'auto';\n            const keyboardAvoidingViewProps = {\n                keyboardVerticalOffset: keyboardAvoidingOffset,\n                behavior: keyboardAvoidingBehavior || 'padding',\n                enabled: avoidKeyboardLikeIOS,\n                style: [styles_1.default.modalize__content, this.modalizeContent, modalStyle],\n            };\n            if (!avoidKeyboardLikeIOS && !adjustToContentHeight) {\n                keyboardAvoidingViewProps.onLayout = this.onModalizeContentLayout;\n            }\n            if (!isVisible) {\n                return null;\n            }\n            return (React.createElement(GestureHandlerWrapper, { style: [styles_1.default.modalize, { elevation }], pointerEvents: pointerEvents },\n                React.createElement(react_native_gesture_handler_1.TapGestureHandler, { ref: this.modal, maxDurationMs: 100000, maxDeltaY: lastSnap, enabled: panGestureEnabled },\n                    React.createElement(react_native_1.View, { style: styles_1.default.modalize__wrapper, pointerEvents: \"box-none\" },\n                        showContent && (React.createElement(AnimatedKeyboardAvoidingView, Object.assign({}, keyboardAvoidingViewProps),\n                            this.renderHandle(),\n                            this.renderHeader(),\n                            this.renderChildren(),\n                            this.renderFooter())),\n                        withOverlay && this.renderOverlay())),\n                this.renderFloatingComponent()));\n        };\n        this.renderReactModal = (child) => {\n            const { isVisible } = this.state;\n            return (React.createElement(react_native_1.Modal, { supportedOrientations: ['landscape', 'portrait', 'portrait-upside-down'], onRequestClose: this.onBackPress, hardwareAccelerated: USE_NATIVE_DRIVER, visible: isVisible, transparent: true }, child));\n        };\n        const fullHeight = screenHeight - props.modalTopOffset;\n        const computedHeight = fullHeight - this.handleHeight - (devices_1.isIphoneX ? 34 : 0);\n        const modalHeight = props.modalHeight || computedHeight;\n        this.initialComputedModalHeight = modalHeight;\n        if (props.modalHeight && props.adjustToContentHeight) {\n            console.error(`[react-native-modalize] You can't use both 'modalHeight' and 'adjustToContentHeight' props at the same time. Only choose one of the two.`);\n        }\n        if ((props.scrollViewProps || props.children) && props.flatListProps) {\n            console.error(`[react-native-modalize] You have defined 'flatListProps' along with 'scrollViewProps' or 'children' props. Remove 'scrollViewProps' or 'children' or 'flatListProps' to fix the error.`);\n        }\n        if ((props.scrollViewProps || props.children) && props.sectionListProps) {\n            console.error(`[react-native-modalize] You have defined 'sectionListProps'  along with 'scrollViewProps' or 'children' props. Remove 'scrollViewProps' or 'children' or 'sectionListProps' to fix the error.`);\n        }\n        if (props.snapPoint) {\n            this.snaps.push(0, modalHeight - props.snapPoint, modalHeight);\n        }\n        else {\n            this.snaps.push(0, modalHeight);\n        }\n        this.snapEnd = this.snaps[this.snaps.length - 1];\n        this.state = {\n            lastSnap: props.snapPoint ? modalHeight - props.snapPoint : 0,\n            isVisible: false,\n            showContent: true,\n            overlay: new react_native_1.Animated.Value(0),\n            modalHeight: props.adjustToContentHeight ? undefined : modalHeight,\n            contentHeight: 0,\n            enableBounces: true,\n            keyboardToggle: false,\n            keyboardHeight: 0,\n            disableScroll: props.alwaysOpen ? true : undefined,\n        };\n        this.beginScrollY.addListener(({ value }) => (this.beginScrollYValue = value));\n        this.reverseBeginScrollY = react_native_1.Animated.multiply(new react_native_1.Animated.Value(-1), this.beginScrollY);\n    }\n    componentDidMount() {\n        const { alwaysOpen } = this.props;\n        if (alwaysOpen) {\n            this.onAnimateOpen(alwaysOpen);\n        }\n        react_native_1.Keyboard.addListener('keyboardDidShow', this.onKeyboardShow);\n        react_native_1.Keyboard.addListener('keyboardDidHide', this.onKeyboardHide);\n    }\n    componentDidUpdate({ adjustToContentHeight }) {\n        const { adjustToContentHeight: nextAdjust } = this.props;\n        if (nextAdjust !== adjustToContentHeight) {\n            this.setState({\n                modalHeight: nextAdjust ? undefined : this.initialComputedModalHeight,\n            });\n        }\n    }\n    componentWillUnmount() {\n        react_native_1.BackHandler.removeEventListener('hardwareBackPress', this.onBackPress);\n        react_native_1.Keyboard.removeListener('keyboardDidShow', this.onKeyboardShow);\n        react_native_1.Keyboard.removeListener('keyboardDidHide', this.onKeyboardHide);\n    }\n    get isHandleOutside() {\n        const { handlePosition } = this.props;\n        return handlePosition === 'outside';\n    }\n    get handleHeight() {\n        const { withHandle } = this.props;\n        if (!withHandle) {\n            return 20;\n        }\n        return this.isHandleOutside ? 35 : 20;\n    }\n    get modalizeContent() {\n        const { modalHeight } = this.state;\n        /*\n         * When we have a scrolling happening in the scrollview, we don't want to translate the modal down.\n         * We either multiply by 0 to cancel the animation, or 1 to proceed.\n         */\n        const cancelTranslateY = (ref) => react_native_1.Animated.multiply(ref, this.cancelTranslateY);\n        /*\n         * We diff and get the negative value only. It sometimes go above 0 (e.g. 1.5) and creates\n         * the flickering on Modalize for a ms\n         */\n        const diffClamp = react_native_1.Animated.diffClamp(this.reverseBeginScrollY, -screenHeight, 0);\n        const dragY = react_native_1.Animated.add(cancelTranslateY(this.dragY), diffClamp);\n        const value = react_native_1.Animated.add(cancelTranslateY(this.translateY), dragY);\n        return {\n            height: modalHeight,\n            maxHeight: this.initialComputedModalHeight,\n            transform: [\n                {\n                    translateY: value.interpolate({\n                        inputRange: [-40, 0, this.snapEnd],\n                        outputRange: [0, 0, this.snapEnd],\n                        extrapolate: 'clamp',\n                    }),\n                },\n            ],\n        };\n    }\n    get overlayBackground() {\n        const { overlay } = this.state;\n        return {\n            opacity: overlay.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, 1],\n            }),\n        };\n    }\n    render() {\n        const { withReactModal } = this.props;\n        if (withReactModal) {\n            return this.renderReactModal(this.renderModalize());\n        }\n        return this.renderModalize();\n    }\n}\nexports.Modalize = Modalize;\nModalize.defaultProps = {\n    handlePosition: 'outside',\n    useNativeDriver: true,\n    adjustToContentHeight: false,\n    disableScrollIfPossible: true,\n    avoidKeyboardLikeIOS: react_native_1.Platform.select({\n        ios: true,\n        android: false,\n        default: true,\n    }),\n    modalTopOffset: react_native_1.Platform.select({\n        ios: 0,\n        android: react_native_1.StatusBar.currentHeight || 0,\n        default: 0,\n    }),\n    panGestureEnabled: true,\n    closeOnOverlayTap: true,\n    withReactModal: false,\n    withHandle: true,\n    withOverlay: true,\n    openAnimationConfig: {\n        timing: { duration: 280, easing: react_native_1.Easing.ease },\n        spring: { speed: 14, bounciness: 4 },\n    },\n    closeAnimationConfig: {\n        timing: { duration: 280, easing: react_native_1.Easing.ease },\n    },\n    dragToss: 0.05,\n    threshold: 120,\n    velocity: 2800,\n};\n"]},"metadata":{},"sourceType":"script"}