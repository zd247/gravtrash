{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Linking } from 'expo';\nimport * as firebase from 'firebase';\nimport * as WebBrowser from 'expo-web-browser';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar captchaUrl = \"https://workers-ef768.firebaseapp.com/captcha.html?appurl=\" + Linking.makeUrl('');\nexport var signInWithPhoneNumber = function signInWithPhoneNumber(phone) {\n  var sendSMSPromise;\n  return _regeneratorRuntime.async(function signInWithPhoneNumber$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          sendSMSPromise = new Promise(function (resolve, reject) {\n            Linking.addEventListener('url', sendSMSCode.bind(null, phone, resolve, reject));\n          });\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(WebBrowser.openBrowserAsync(captchaUrl));\n\n        case 3:\n          return _context.abrupt(\"return\", sendSMSPromise);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar sendSMSCode = function sendSMSCode(phone, resolve, reject, _ref) {\n  var url, tokenEncoded, token, captchaVerifier, confirmationResult;\n  return _regeneratorRuntime.async(function sendSMSCode$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          url = _ref.url;\n          Platform.OS === 'ios' && WebBrowser.dismissBrowser();\n          tokenEncoded = Linking.parse(url).queryParams['token'];\n\n          if (!tokenEncoded) {\n            _context3.next = 16;\n            break;\n          }\n\n          token = decodeURIComponent(tokenEncoded);\n          captchaVerifier = {\n            type: 'recaptcha',\n            verify: function verify() {\n              return Promise.resolve(token);\n            }\n          };\n          _context3.prev = 6;\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(firebase.auth().signInWithPhoneNumber(phone, captchaVerifier));\n\n        case 9:\n          confirmationResult = _context3.sent;\n          resolve(function _callee(smsCode) {\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return _regeneratorRuntime.awrap(confirmationResult.confirm(smsCode));\n\n                  case 3:\n                    _context2.next = 8;\n                    break;\n\n                  case 5:\n                    _context2.prev = 5;\n                    _context2.t0 = _context2[\"catch\"](0);\n                    console.warn(_context2.t0);\n\n                  case 8:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[0, 5]], Promise);\n          });\n          _context3.next = 16;\n          break;\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](6);\n          reject(_context3.t0);\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[6, 13]], Promise);\n};","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/helpers/phoneAuthentication.js"],"names":["Linking","firebase","WebBrowser","captchaUrl","makeUrl","signInWithPhoneNumber","phone","sendSMSPromise","Promise","resolve","reject","addEventListener","sendSMSCode","bind","openBrowserAsync","url","Platform","OS","dismissBrowser","tokenEncoded","parse","queryParams","token","decodeURIComponent","captchaVerifier","type","verify","auth","confirmationResult","smsCode","confirm","console","warn"],"mappings":";AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;;AAGA,IAAMC,UAAU,kEAAgEH,OAAO,CAACI,OAAR,CAC5E,EAD4E,CAAhF;AAIA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,UAAAA,cAD2B,GACV,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpDV,YAAAA,OAAO,CAACW,gBAAR,CACI,KADJ,EAEIC,WAAW,CAACC,IAAZ,CAAiB,IAAjB,EAAuBP,KAAvB,EAA8BG,OAA9B,EAAuCC,MAAvC,CAFJ;AAIH,WALsB,CADU;AAAA;AAAA,2CAQ3BR,UAAU,CAACY,gBAAX,CAA4BX,UAA5B,CAR2B;;AAAA;AAAA,2CAU1BI,cAV0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B;;AAaP,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAAON,KAAP,EAAcG,OAAd,EAAuBC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiCK,UAAAA,GAAjC,QAAiCA,GAAjC;AAChBC,UAAAA,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyBf,UAAU,CAACgB,cAAX,EAAzB;AAEMC,UAAAA,YAHU,GAGKnB,OAAO,CAACoB,KAAR,CAAcL,GAAd,EAAmBM,WAAnB,CAA+B,OAA/B,CAHL;;AAAA,eAIZF,YAJY;AAAA;AAAA;AAAA;;AAKNG,UAAAA,KALM,GAKEC,kBAAkB,CAACJ,YAAD,CALpB;AAONK,UAAAA,eAPM,GAOY;AACpBC,YAAAA,IAAI,EAAE,WADc;AAEpBC,YAAAA,MAAM,EAAE;AAAA,qBAAMlB,OAAO,CAACC,OAAR,CAAgBa,KAAhB,CAAN;AAAA;AAFY,WAPZ;AAAA;AAAA;AAAA,2CAYyBrB,QAAQ,CACpC0B,IAD4B,GAE5BtB,qBAF4B,CAENC,KAFM,EAECkB,eAFD,CAZzB;;AAAA;AAYFI,UAAAA,kBAZE;AAgBRnB,UAAAA,OAAO,CAAC,iBAAMoB,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAEMD,kBAAkB,CAACE,OAAnB,CAA2BD,OAA3B,CAFN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIAE,oBAAAA,OAAO,CAACC,IAAR;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAD,CAAP;AAhBQ;AAAA;;AAAA;AAAA;AAAA;AAwBRtB,UAAAA,MAAM,cAAN;;AAxBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import { Linking } from 'expo';\nimport * as firebase from 'firebase';\nimport * as WebBrowser from 'expo-web-browser';\nimport { Platform } from 'react-native';\n\nconst captchaUrl = `https://workers-ef768.firebaseapp.com/captcha.html?appurl=${Linking.makeUrl(\n    ''\n)}`;\n\nexport const signInWithPhoneNumber = async phone => {\n    const sendSMSPromise = new Promise((resolve, reject) => {\n        Linking.addEventListener(\n            'url',\n            sendSMSCode.bind(null, phone, resolve, reject)\n        );\n    });\n\n    await WebBrowser.openBrowserAsync(captchaUrl);\n    //Linking.removeEventListener('url', listener);\n    return sendSMSPromise;\n};\n\nconst sendSMSCode = async (phone, resolve, reject, { url }) => {\n    Platform.OS === 'ios' && WebBrowser.dismissBrowser();\n\n    const tokenEncoded = Linking.parse(url).queryParams['token'];\n    if (tokenEncoded) {\n        const token = decodeURIComponent(tokenEncoded);\n        //fake firebase.auth.ApplicationVerifier\n        const captchaVerifier = {\n            type: 'recaptcha',\n            verify: () => Promise.resolve(token)\n        };\n        try {\n            const confirmationResult = await firebase\n                .auth()\n                .signInWithPhoneNumber(phone, captchaVerifier);\n\n            resolve(async smsCode => {\n                try {\n                    await confirmationResult.confirm(smsCode);\n                } catch (e) {\n                    console.warn(e);\n                }\n            });\n        } catch (e) {\n            reject(e);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}