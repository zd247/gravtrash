{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/zd/projects/trashgrav-SEPM/ReactNative/screens/SettingScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport colors from \"../assets/colors\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen() {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.signOut = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(firebase.auth().signOut());\n\n            case 3:\n              _this.props.onsignOut();\n\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              alert(\"Unable to sign out right now\");\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 7\n        }\n      }, !this.props.auth.isDriver ? React.createElement(CustomActionButton, {\n        style: styles.changeMode,\n        title: \"Change To Driver Mode\",\n        onPress: this.props.changeDriverMode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: \"100\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, \"Change To Driver Mode\")) : React.createElement(CustomActionButton, {\n        style: styles.changeMode,\n        title: \"Change To Customer Mode\",\n        onPress: this.props.changeCustomerMode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: \"100\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, \"Change To Customer Mode\")), React.createElement(CustomActionButton, {\n        style: styles.changeMode,\n        title: \"Sign Up\",\n        onPress: this.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: \"100\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }, \"Logout\")));\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signIn: function signIn(user) {\n      return dispatch({\n        type: \"SIGN_IN\",\n        payload: user\n      });\n    },\n    onsignOut: function onsignOut() {\n      return dispatch({\n        type: \"SIGN_OUT\"\n      });\n    },\n    changeDriverMode: function changeDriverMode() {\n      return dispatch({\n        type: \"CHANGE_TO_DRIVER_MODE\"\n      });\n    },\n    changeCustomerMode: function changeCustomerMode() {\n      return dispatch({\n        type: \"CHANGE_TO_CUSTOMER_MODE\"\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingScreen);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: colors.bgMain\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20\n  }\n});","map":{"version":3,"sources":["/home/zd/projects/trashgrav-SEPM/ReactNative/screens/SettingScreen.js"],"names":["React","Component","CustomActionButton","colors","connect","firebase","SettingScreen","signOut","auth","props","onsignOut","alert","styles","container","isDriver","changeMode","changeDriverMode","fontWeight","color","changeCustomerMode","mapStateToProps","state","mapDispatchToProps","dispatch","signIn","user","type","payload","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","bgMain","width","borderWidth","borderColor","bgError","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\n\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport colors from \"../assets/colors\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nclass SettingScreen extends Component {\n  signOut = async () => {\n    try {\n      await firebase.auth().signOut();\n      this.props.onsignOut();\n      //this.props.navigation.navigate(\"LoginScreen\");\n    } catch (error) {\n      alert(\"Unable to sign out right now\");\n    }\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {!this.props.auth.isDriver ? (\n          <CustomActionButton\n            style={styles.changeMode}\n            title=\"Change To Driver Mode\"\n            onPress={this.props.changeDriverMode}\n          >\n            <Text style={{ fontWeight: \"100\", color: \"white\" }}>\n              Change To Driver Mode\n            </Text>\n          </CustomActionButton>\n        ) : (\n          <CustomActionButton\n            style={styles.changeMode}\n            title=\"Change To Customer Mode\"\n            onPress={this.props.changeCustomerMode}\n          >\n            <Text style={{ fontWeight: \"100\", color: \"white\" }}>\n              Change To Customer Mode\n            </Text>\n          </CustomActionButton>\n        )}\n        <CustomActionButton\n          style={styles.changeMode}\n          title=\"Sign Up\"\n          onPress={this.signOut}\n        >\n          <Text style={{ fontWeight: \"100\", color: \"white\" }}>Logout</Text>\n        </CustomActionButton>\n      </View>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (user) => dispatch({ type: \"SIGN_IN\", payload: user }),\n    onsignOut: () => dispatch({ type: \"SIGN_OUT\" }),\n    changeDriverMode: () => dispatch({ type: \"CHANGE_TO_DRIVER_MODE\" }),\n    changeCustomerMode: () => dispatch({ type: \"CHANGE_TO_CUSTOMER_MODE\" }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingScreen);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: colors.bgMain,\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}