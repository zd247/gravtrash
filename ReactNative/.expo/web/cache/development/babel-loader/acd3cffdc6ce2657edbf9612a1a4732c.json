{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/screens/Driver/DriverMapScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport * as Location from \"expo-location\";\nimport CustomActionButton from \"../../components/CustomTempButton\";\nimport ItemList from \"../../components/ItemList\";\nimport colors from \"../../assets/colors\";\nimport apiKey from \"../../helpers/googleAPIkey\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { connect } from \"react-redux\";\nimport MapView, { Polyline, Marker } from \"react-native-maps\";\nimport _ from \"lodash\";\nimport PolyLine from \"@mapbox/polyline\";\n\nvar DriverMapScreen = function (_Component) {\n  _inherits(DriverMapScreen, _Component);\n\n  var _super = _createSuper(DriverMapScreen);\n\n  function DriverMapScreen(props) {\n    var _this;\n\n    _classCallCheck(this, DriverMapScreen);\n\n    _this = _super.call(this, props);\n\n    _this.findCurrentLocationAsync = function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (status !== \"granted\") {\n                _this.setState({\n                  errorMessage: \"Permission to access location was denied\"\n                });\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 7:\n              location = _context.sent;\n\n              _this.setState({\n                location: location\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      location: null,\n      errorMessage: null,\n      latitude: 0,\n      longitude: 0,\n      locationPredictions: [],\n      destination: \"\",\n      predictions: [],\n      pointCoords: []\n    };\n    _this.onChangeDestinationDebounced = _.debounce(_this.onChangeDestination, 1000);\n    return _this;\n  }\n\n  _createClass(DriverMapScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this2.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, function (error) {\n        return console.error(error);\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 2000,\n        timeout: 20000\n      });\n    }\n  }, {\n    key: \"getRouteDirections\",\n    value: function getRouteDirections(destinationPlaceId, destinationName) {\n      var response, json, points, pointCoords;\n      return _regeneratorRuntime.async(function getRouteDirections$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"https://maps.googleapis.com/maps/api/directions/json?origin=\" + this.state.latitude + \",\" + this.state.longitude + \"&destination=place_id:\" + destinationPlaceId + \"&key=\" + apiKey));\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              json = _context2.sent;\n              points = PolyLine.decode(json.routes[0].overview_polyline.points);\n              pointCoords = points.map(function (point) {\n                return {\n                  latitude: point[0],\n                  longitude: point[1]\n                };\n              });\n              this.setState({\n                pointCoords: pointCoords,\n                predictions: [],\n                destination: destinationName\n              });\n              Keyboard.dismiss();\n              this.map.fitToCoordinates(pointCoords);\n              _context2.next = 17;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 14]], Promise);\n    }\n  }, {\n    key: \"onChangeDestination\",\n    value: function onChangeDestination(destination) {\n      var apiUrl, result, json;\n      return _regeneratorRuntime.async(function onChangeDestination$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              apiUrl = \"https://maps.googleapis.com/maps/api/place/autocomplete/json?key=\" + apiKey + \"\\n    &input=\" + destination + \"&location=\" + this.state.latitude + \",\" + this.state.longitude + \"&radius=2000\";\n              _context3.prev = 1;\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(fetch(apiUrl));\n\n            case 4:\n              result = _context3.sent;\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(result.json());\n\n            case 7:\n              json = _context3.sent;\n              this.setState({\n                predictions: json.predictions\n              });\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error(_context3.t0);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[1, 11]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var marker = null;\n\n      if (this.state.pointCoords.length > 1) {\n        marker = React.createElement(Marker, {\n          coordinate: this.state.pointCoords[this.state.pointCoords.length - 1],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 9\n          }\n        });\n      }\n\n      var predictions = this.state.predictions.map(function (prediction) {\n        return React.createElement(TouchableHighlight, {\n          onPress: function onPress() {\n            return _this3.getRouteDirections(prediction.place_id, prediction.structured_formatting.main_text);\n          },\n          key: prediction.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 7\n          }\n        }, React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          style: styles.suggestions,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }\n        }, prediction.structured_formatting.main_text)));\n      });\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }\n      }, React.createElement(SafeAreaView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this3.props.navigation.openDrawer();\n        },\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }\n      }, React.createElement(Ionicons, {\n        name: \"ios-menu\",\n        size: 30,\n        color: \"white\",\n        style: {\n          marginLeft: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      })), React.createElement(Text, {\n        style: styles.headerTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, \"Driver Screen\")), React.createElement(View, {\n        style: styles.body,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }, React.createElement(MapView, {\n        ref: function ref(map) {\n          _this3.map = map;\n        },\n        style: styles.mapStyle,\n        provider: \"google\",\n        region: {\n          latitude: this.state.latitude,\n          longitude: this.state.longitude,\n          latitudeDelta: 0.015,\n          longitudeDelta: 0.0121\n        },\n        showsUserLocation: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }\n      }, React.createElement(Polyline, {\n        coordinates: this.state.pointCoords,\n        strokeWidth: 4,\n        strokeColor: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }\n      }), marker), React.createElement(View, {\n        style: {\n          flex: 1,\n          position: \"absolute\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }\n      }, React.createElement(TextInput, {\n        placeholder: \"Enter destination...\",\n        style: styles.destinationInput,\n        value: this.state.destination,\n        clearButtonMode: \"always\",\n        onChangeText: function onChangeText(destination) {\n          _this3.setState({\n            destination: destination\n          });\n\n          _this3.onChangeDestinationDebounced(destination);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }\n      }), predictions)), React.createElement(SafeAreaView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DriverMapScreen;\n}(Component);\n\nexport default DriverMapScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.bgMain\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20\n  },\n  header: {\n    height: 70,\n    borderBottomWidth: 0.5,\n    borderBottomColor: colors.borderColor,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\"\n  },\n  headerTitle: {\n    fontSize: 24,\n    color: \"white\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\"\n  },\n  body: {\n    flex: 1\n  },\n  mapStyle: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height\n  },\n  destinationInput: {\n    borderWidth: 0.5,\n    borderColor: \"grey\",\n    height: 40,\n    marginTop: 20,\n    marginLeft: 5,\n    marginRight: 5,\n    padding: 5,\n    backgroundColor: \"white\",\n    width: Dimensions.get(\"window\").width\n  },\n  locationSuggestion: {\n    backgroundColor: \"white\",\n    padding: 10,\n    fontSize: 18,\n    borderWidth: 0.5\n  },\n  suggestions: {\n    backgroundColor: \"white\",\n    padding: 5,\n    fontSize: 18,\n    borderWidth: 0.5,\n    marginLeft: 5,\n    marginRight: 5\n  }\n});","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/screens/Driver/DriverMapScreen.js"],"names":["React","Component","Location","CustomActionButton","ItemList","colors","apiKey","Ionicons","connect","MapView","Polyline","Marker","_","PolyLine","DriverMapScreen","props","findCurrentLocationAsync","requestPermissionsAsync","status","setState","errorMessage","getCurrentPositionAsync","location","state","latitude","longitude","locationPredictions","destination","predictions","pointCoords","onChangeDestinationDebounced","debounce","onChangeDestination","navigator","geolocation","getCurrentPosition","position","coords","error","console","enableHighAccuracy","maximumAge","timeout","destinationPlaceId","destinationName","fetch","response","json","points","decode","routes","overview_polyline","map","point","Keyboard","dismiss","fitToCoordinates","apiUrl","result","marker","length","prediction","getRouteDirections","place_id","structured_formatting","main_text","id","styles","suggestions","container","header","navigation","openDrawer","flex","marginLeft","headerTitle","body","mapStyle","latitudeDelta","longitudeDelta","destinationInput","StyleSheet","create","backgroundColor","bgMain","changeMode","width","borderWidth","borderColor","bgError","marginBottom","height","borderBottomWidth","borderBottomColor","alignItems","justifyContent","flexDirection","fontSize","color","Dimensions","get","marginTop","marginRight","padding","locationSuggestion"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Dimensions,\n  SafeAreaView,\n  Keyboard,\n  TextInput,\n  TouchableHighlight,\n} from \"react-native\";\n\nimport * as Location from \"expo-location\";\n\nimport CustomActionButton from \"../../components/CustomTempButton\";\nimport ItemList from \"../../components/ItemList\";\nimport colors from \"../../assets/colors\";\n\nimport apiKey from \"../../helpers/googleAPIkey\";\n\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { connect } from \"react-redux\";\nimport MapView, { Polyline, Marker } from \"react-native-maps\";\nimport _ from \"lodash\";\nimport PolyLine from \"@mapbox/polyline\";\n\nclass DriverMapScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: null,\n      errorMessage: null,\n      latitude: 0,\n      longitude: 0,\n      locationPredictions: [],\n      destination: \"\",\n      predictions: [],\n      pointCoords: [],\n    };\n    this.onChangeDestinationDebounced = _.debounce(\n      this.onChangeDestination,\n      1000\n    );\n  }\n\n  componentDidMount() {\n    //Get current location and set initial region to this\n    //this.findCurrentLocationAsync();\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        this.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        });\n      },\n      (error) => console.error(error),\n      { enableHighAccuracy: true, maximumAge: 2000, timeout: 20000 }\n    );\n  }\n\n  findCurrentLocationAsync = async () => {\n    let { status } = await Location.requestPermissionsAsync();\n\n    if (status !== \"granted\") {\n      this.setState({\n        errorMessage: \"Permission to access location was denied\",\n      });\n    }\n\n    let location = await Location.getCurrentPositionAsync({});\n    this.setState({ location });\n    //console.log(JSON.stringify(location.coords));\n  };\n\n  async getRouteDirections(destinationPlaceId, destinationName) {\n    try {\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/directions/json?origin=${this.state.latitude},${this.state.longitude}&destination=place_id:${destinationPlaceId}&key=${apiKey}`\n      );\n      const json = await response.json();\n      //console.log(json);\n      const points = PolyLine.decode(json.routes[0].overview_polyline.points);\n      const pointCoords = points.map((point) => {\n        return { latitude: point[0], longitude: point[1] };\n      });\n      this.setState({\n        pointCoords,\n        predictions: [],\n        destination: destinationName,\n      });\n      Keyboard.dismiss();\n      //console.log(pointCoords);\n      this.map.fitToCoordinates(pointCoords);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async onChangeDestination(destination) {\n    const apiUrl = `https://maps.googleapis.com/maps/api/place/autocomplete/json?key=${apiKey}\n    &input=${destination}&location=${this.state.latitude},${this.state.longitude}&radius=2000`;\n    //console.log(apiUrl);\n    try {\n      const result = await fetch(apiUrl);\n      const json = await result.json();\n      this.setState({\n        predictions: json.predictions,\n      });\n      //console.log(json);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  render() {\n    let marker = null;\n\n    if (this.state.pointCoords.length > 1) {\n      marker = (\n        <Marker\n          coordinate={this.state.pointCoords[this.state.pointCoords.length - 1]}\n        />\n      );\n    }\n\n    const predictions = this.state.predictions.map((prediction) => (\n      <TouchableHighlight\n        onPress={() =>\n          this.getRouteDirections(\n            prediction.place_id,\n            prediction.structured_formatting.main_text\n          )\n        }\n        key={prediction.id}\n      >\n        <View>\n          <Text style={styles.suggestions}>\n            {prediction.structured_formatting.main_text}\n          </Text>\n        </View>\n      </TouchableHighlight>\n    ));\n    return (\n      <View style={styles.container}>\n        <SafeAreaView />\n        <View style={styles.header}>\n          <TouchableOpacity\n            onPress={() => this.props.navigation.openDrawer()}\n            style={{ flex: 1 }}\n          >\n            <Ionicons\n              name=\"ios-menu\"\n              size={30}\n              color=\"white\"\n              style={{ marginLeft: 10 }}\n            />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Driver Screen</Text>\n        </View>\n        <View style={styles.body}>\n          <MapView\n            ref={(map) => {\n              this.map = map;\n            }}\n            style={styles.mapStyle}\n            provider=\"google\"\n            region={{\n              latitude: this.state.latitude,\n              longitude: this.state.longitude,\n              latitudeDelta: 0.015,\n              longitudeDelta: 0.0121,\n            }}\n            showsUserLocation={true}\n          >\n            <Polyline\n              coordinates={this.state.pointCoords}\n              strokeWidth={4}\n              strokeColor=\"red\"\n            />\n            {marker}\n          </MapView>\n          <View style={{ flex: 1, position: \"absolute\" }}>\n            <TextInput\n              placeholder=\"Enter destination...\"\n              style={styles.destinationInput}\n              value={this.state.destination}\n              clearButtonMode=\"always\"\n              onChangeText={(destination) => {\n                this.setState({ destination });\n                this.onChangeDestinationDebounced(destination);\n              }}\n            />\n            {predictions}\n          </View>\n        </View>\n        <SafeAreaView />\n      </View>\n    );\n  }\n}\n\nexport default DriverMapScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n\n    backgroundColor: colors.bgMain,\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20,\n  },\n  header: {\n    height: 70,\n    borderBottomWidth: 0.5,\n    borderBottomColor: colors.borderColor,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n  },\n  headerTitle: {\n    fontSize: 24,\n    color: \"white\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n  },\n  body: {\n    flex: 1,\n  },\n  mapStyle: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n  },\n  destinationInput: {\n    borderWidth: 0.5,\n    borderColor: \"grey\",\n    height: 40,\n    marginTop: 20,\n    marginLeft: 5,\n    marginRight: 5,\n    padding: 5,\n    backgroundColor: \"white\",\n    width: Dimensions.get(\"window\").width,\n  },\n  locationSuggestion: {\n    backgroundColor: \"white\",\n    padding: 10,\n    fontSize: 18,\n    borderWidth: 0.5,\n  },\n  suggestions: {\n    backgroundColor: \"white\",\n    padding: 5,\n    fontSize: 18,\n    borderWidth: 0.5,\n    marginLeft: 5,\n    marginRight: 5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}