{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar truncateString = function truncateString(codeValue, codeLength) {\n  return codeValue.substr(0, codeLength);\n};\n\nexport var getSymbols = function getSymbols(codeValue, codeLength) {\n  return [].concat(_toConsumableArray(truncateString(codeValue, codeLength).split('')), _toConsumableArray(new Array(codeLength).fill(''))).slice(0, codeLength);\n};\nexport var getStyle = function getStyle(base, custom) {\n  return custom ? [base, custom] : base;\n};\nexport var isLastFilledCell = function isLastFilledCell(_ref) {\n  var value = _ref.value,\n      index = _ref.index;\n  return Boolean(value && value.length - 2 === index);\n};","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/node_modules/react-native-confirmation-code-field/lib/utils.js"],"names":["truncateString","codeValue","codeLength","substr","getSymbols","split","Array","fill","slice","getStyle","base","custom","isLastFilledCell","value","index","Boolean","length"],"mappings":";;AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAYC,UAAZ;AAAA,SAA2BD,SAAS,CAACE,MAAV,CAAiB,CAAjB,EAAoBD,UAApB,CAA3B;AAAA,CAAvB;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACH,SAAD,EAAYC,UAAZ;AAAA,SAA2B,6BAC9CF,cAAc,CAACC,SAAD,EAAYC,UAAZ,CAAd,CAAsCG,KAAtC,CAA4C,EAA5C,CAD8C,sBAE9C,IAAIC,KAAJ,CAAUJ,UAAV,EAAsBK,IAAtB,CAA2B,EAA3B,CAF8C,GAGnDC,KAHmD,CAG7C,CAH6C,EAG1CN,UAH0C,CAA3B;AAAA,CAAnB;AAIP,OAAO,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,MAAP;AAAA,SAAkBA,MAAM,GAAG,CAACD,IAAD,EAAOC,MAAP,CAAH,GAAoBD,IAA5C;AAAA,CAAjB;AACP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,KAAV,QAAUA,KAAV;AAAA,SAAuBC,OAAO,CAACF,KAAK,IAAIA,KAAK,CAACG,MAAN,GAAe,CAAf,KAAqBF,KAA/B,CAA9B;AAAA,CAAzB","sourcesContent":["const truncateString = (codeValue, codeLength) => codeValue.substr(0, codeLength);\nexport const getSymbols = (codeValue, codeLength) => [\n    ...truncateString(codeValue, codeLength).split(''),\n    ...new Array(codeLength).fill(''),\n].slice(0, codeLength);\nexport const getStyle = (base, custom) => custom ? [base, custom] : base;\nexport const isLastFilledCell = ({ value, index, }) => Boolean(value && value.length - 2 === index);\n"]},"metadata":{},"sourceType":"module"}