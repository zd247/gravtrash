{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/zd/projects/trashgrav-SEPM/ReactNative/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport colors from \"../assets/colors\";\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this);\n\n    _this.onSignIn = function _callee() {\n      var response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.email && _this.state.password)) {\n                _context.next = 18;\n                break;\n              }\n\n              _this.setState({\n                isLoading: true\n              });\n\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(_this.state.email, _this.state.password));\n\n            case 5:\n              response = _context.sent;\n\n              if (response) {\n                _this.setState({\n                  isLoading: false\n                });\n\n                _this.props.signIn(response.user);\n              }\n\n              _context.next = 18;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n\n              _this.setState({\n                isLoading: false\n              });\n\n              _context.t1 = _context.t0.code;\n              _context.next = _context.t1 === \"auth/user-not-found\" ? 15 : _context.t1 === \"auth/invalid-email\" ? 17 : 18;\n              break;\n\n            case 15:\n              alert(\"A user with that email does not exist. Try signing Up\");\n              return _context.abrupt(\"break\", 18);\n\n            case 17:\n              alert(\"Please enter an email address\");\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 9]], Promise);\n    };\n\n    _this.state = {\n      email: \"\",\n      password: \"\",\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, this.state.isLoading ? React.createElement(View, {\n        style: [StyleSheet.absoluteFill, {\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          zIndex: 1000,\n          elevation: 1000\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: colors.logoColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      })) : null);\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signIn: function signIn(user) {\n      return dispatch({\n        type: \"SIGN_IN\",\n        payload: user\n      });\n    },\n    signOut: function signOut() {\n      return dispatch({\n        type: \"SIGN_OUT\"\n      });\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(LoginScreen);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.bgMain\n  },\n  textInput: {\n    height: 50,\n    borderWidth: 0.5,\n    borderColor: colors.borderColor,\n    marginHorizontal: 40,\n    marginBottom: 10,\n    color: \"black\",\n    paddingHorizontal: 10\n  },\n  loginButtons: {\n    borderWidth: 0.5,\n    backgroundColor: \"transparent\",\n    marginBottom: 10,\n    width: 200\n  }\n});","map":{"version":3,"sources":["/home/zd/projects/trashgrav-SEPM/ReactNative/screens/LoginScreen.js"],"names":["React","Component","Ionicons","colors","CustomActionButton","connect","firebase","LoginScreen","onSignIn","state","email","password","setState","isLoading","auth","signInWithEmailAndPassword","response","props","signIn","user","code","alert","flex","backgroundColor","StyleSheet","absoluteFill","alignItems","justifyContent","zIndex","elevation","logoColor","mapDispatchToProps","dispatch","type","payload","signOut","styles","create","container","bgMain","textInput","height","borderWidth","borderColor","marginHorizontal","marginBottom","color","paddingHorizontal","loginButtons","width"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;;;;AAcA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,MAAP;AACA,OAAOC,kBAAP;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;;IAEMC,W;;;;;AACJ,yBAAc;AAAA;;AAAA;;AACZ;;AADY,UASdC,QATc,GASH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACL,MAAKC,KAAL,CAAWC,KAAX,IAAoB,MAAKD,KAAL,CAAWE,QAD1B;AAAA;AAAA;AAAA;;AAEP,oBAAKC,QAAL,CAAc;AAAEC,gBAAAA,SAAS,EAAE;AAAb,eAAd;;AAFO;AAAA;AAAA,+CAIkBP,QAAQ,CAC5BQ,IADoB,GAEpBC,0BAFoB,CAEO,MAAKN,KAAL,CAAWC,KAFlB,EAEyB,MAAKD,KAAL,CAAWE,QAFpC,CAJlB;;AAAA;AAICK,cAAAA,QAJD;;AAOL,kBAAIA,QAAJ,EAAc;AACZ,sBAAKJ,QAAL,CAAc;AAAEC,kBAAAA,SAAS,EAAE;AAAb,iBAAd;;AACA,sBAAKI,KAAL,CAAWC,MAAX,CAAkBF,QAAQ,CAACG,IAA3B;AAED;;AAXI;AAAA;;AAAA;AAAA;AAAA;;AAaL,oBAAKP,QAAL,CAAc;AAAEC,gBAAAA,SAAS,EAAE;AAAb,eAAd;;AAbK,4BAcG,YAAMO,IAdT;AAAA,8CAeE,qBAfF,wBAkBE,oBAlBF;AAAA;;AAAA;AAgBDC,cAAAA,KAAK,CAAC,uDAAD,CAAL;AAhBC;;AAAA;AAmBDA,cAAAA,KAAK,CAAC,+BAAD,CAAL;;AAnBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KATG;;AAEZ,UAAKZ,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXE,MAAAA,SAAS,EAAE;AAHA,KAAb;AAFY;AAOb;;;;6BA2BQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAES,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,eAAe,EAAE;AAA5B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKd,KAAL,CAAWI,SAAX,GACC,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACLW,UAAU,CAACC,YADN,EAEL;AACEC,UAAAA,UAAU,EAAE,QADd;AAEEC,UAAAA,cAAc,EAAE,QAFlB;AAGEC,UAAAA,MAAM,EAAE,IAHV;AAIEC,UAAAA,SAAS,EAAE;AAJb,SAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWE,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAE1B,MAAM,CAAC2B,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADD,GAcG,IAfN,CADF;AAqBD;;;;EAzDuB7B,S;;AA4D1B,IAAM8B,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLd,IAAAA,MAAM,EAAE,gBAACC,IAAD;AAAA,aAAUa,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEf;AAA5B,OAAD,CAAlB;AAAA,KADH;AAELgB,IAAAA,OAAO,EAAE;AAAA,aAAMH,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA;AAFJ,GAAP;AAID,CALD;;AAOA,eAAe5B,OAAO,CAAC,IAAD,EAAO0B,kBAAP,CAAP,CAAkCxB,WAAlC,CAAf;AAEA,IAAM6B,MAAM,GAAGZ,UAAU,CAACa,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACThB,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAEpB,MAAM,CAACoC;AAFf,GADoB;AAK/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,WAAW,EAAE,GAFJ;AAGTC,IAAAA,WAAW,EAAExC,MAAM,CAACwC,WAHX;AAITC,IAAAA,gBAAgB,EAAE,EAJT;AAKTC,IAAAA,YAAY,EAAE,EALL;AAMTC,IAAAA,KAAK,EAAE,OANE;AAOTC,IAAAA,iBAAiB,EAAE;AAPV,GALoB;AAc/BC,EAAAA,YAAY,EAAE;AACZN,IAAAA,WAAW,EAAE,GADD;AAEZnB,IAAAA,eAAe,EAAE,aAFL;AAGZsB,IAAAA,YAAY,EAAE,EAHF;AAIZI,IAAAA,KAAK,EAAE;AAJK;AAdiB,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  ActivityIndicator,\n  Dimensions,\n  ScrollView,\n\tKeyboard,\n\tTouchableNativeFeedback,\n\tTouchableWithoutFeedback,\n} from \"react-native\";\n\nimport { Ionicons } from \"@expo/vector-icons\";\nimport colors from \"../assets/colors\";\nimport CustomActionButton from \"../components/CustomTempButton\";\n\nimport { connect } from \"react-redux\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nclass LoginScreen extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      password: \"\",\n      isLoading: false,\n    };\n  }\n\n  onSignIn = async () => {\n    if (this.state.email && this.state.password) {\n      this.setState({ isLoading: true });\n      try {\n        const response = await firebase\n          .auth()\n          .signInWithEmailAndPassword(this.state.email, this.state.password);\n        if (response) {\n          this.setState({ isLoading: false });\n          this.props.signIn(response.user);\n          //this.props.navigation.navigate(\"HomeScreen\");\n        }\n      } catch (error) {\n        this.setState({ isLoading: false });\n        switch (error.code) {\n          case \"auth/user-not-found\":\n            alert(\"A user with that email does not exist. Try signing Up\");\n            break;\n          case \"auth/invalid-email\":\n            alert(\"Please enter an email address\");\n        }\n      }\n    }\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1, backgroundColor: \"white\" }}>\n        {this.state.isLoading ? (\n          <View\n            style={[\n              StyleSheet.absoluteFill,\n              {\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                zIndex: 1000,\n                elevation: 1000,\n              },\n            ]}\n          >\n            <ActivityIndicator size=\"large\" color={colors.logoColor} />\n          </View>\n        ) : null}\n        \n        \n      </View>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (user) => dispatch({ type: \"SIGN_IN\", payload: user }),\n    signOut: () => dispatch({ type: \"SIGN_OUT\" }),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(LoginScreen);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.bgMain,\n  },\n  textInput: {\n    height: 50,\n    borderWidth: 0.5,\n    borderColor: colors.borderColor,\n    marginHorizontal: 40,\n    marginBottom: 10,\n    color: \"black\",\n    paddingHorizontal: 10,\n  },\n  loginButtons: {\n    borderWidth: 0.5,\n    backgroundColor: \"transparent\",\n    marginBottom: 10,\n    width: 200,\n  },\n});"]},"metadata":{},"sourceType":"module"}