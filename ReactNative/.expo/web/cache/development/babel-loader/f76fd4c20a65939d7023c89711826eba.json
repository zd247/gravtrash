{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Permissions from \"expo-permissions\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var openImageLibrary = function openImageLibrary() {\n  var _await$Permissions$as, status, result;\n\n  return _regeneratorRuntime.async(function openImageLibrary$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL));\n\n        case 2:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n\n          if (!(status !== \"granted\")) {\n            _context.next = 9;\n            break;\n          }\n\n          alert(\"Sorry, we need camera roll permission to select an image\");\n          return _context.abrupt(\"return\", false);\n\n        case 9:\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [1, 1],\n            base64: true\n          }));\n\n        case 11:\n          result = _context.sent;\n          return _context.abrupt(\"return\", !result.cancelled ? result : false);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var openCamera = function openCamera() {\n  var _await$Permissions$as2, status, result;\n\n  return _regeneratorRuntime.async(function openCamera$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL, Permissions.CAMERA));\n\n        case 2:\n          _await$Permissions$as2 = _context2.sent;\n          status = _await$Permissions$as2.status;\n\n          if (!(status !== \"granted\")) {\n            _context2.next = 9;\n            break;\n          }\n\n          alert(\"Sorry, we need camera roll & camera permission to select an image\");\n          return _context2.abrupt(\"return\", false);\n\n        case 9:\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n            quality: 0.1,\n            base64: true,\n            allowsEditing: Platform.OS == \"ios\" ? false : true,\n            aspect: [4, 3]\n          }));\n\n        case 11:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", !result.cancelled ? result : false);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var prepareBlob = function prepareBlob(imageUri) {\n  var blob;\n  return _regeneratorRuntime.async(function prepareBlob$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            var xml = new XMLHttpRequest();\n\n            xml.onload = function () {\n              resolve(xml.response);\n            };\n\n            xml.onerror = function (e) {\n              console.log(e);\n              reject(new TypeError(\"Image Upload failed\"));\n            };\n\n            xml.responseType = \"blob\";\n            xml.open(\"GET\", imageUri, true);\n            xml.send();\n          }));\n\n        case 2:\n          blob = _context3.sent;\n          return _context3.abrupt(\"return\", blob);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/helpers/imageHelpers.js"],"names":["Permissions","ImagePicker","openImageLibrary","askAsync","CAMERA_ROLL","status","alert","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","base64","result","cancelled","openCamera","CAMERA","launchCameraAsync","quality","Platform","OS","prepareBlob","imageUri","Promise","resolve","reject","xml","XMLHttpRequest","onload","response","onerror","e","console","log","TypeError","responseType","open","send","blob"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,kBAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;AAGA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACLF,WAAW,CAACG,QAAZ,CAAqBH,WAAW,CAACI,WAAjC,CADK;;AAAA;AAAA;AACtBC,UAAAA,MADsB,yBACtBA,MADsB;;AAAA,gBAE1BA,MAAM,KAAK,SAFe;AAAA;AAAA;AAAA;;AAG5BC,UAAAA,KAAK,CAAC,0DAAD,CAAL;AAH4B,2CAIrB,KAJqB;;AAAA;AAAA;AAAA,2CAMPL,WAAW,CAACM,uBAAZ,CAAoC;AACvDC,YAAAA,UAAU,EAAEP,WAAW,CAACQ,gBAAZ,CAA6BC,GADc;AAEvDC,YAAAA,aAAa,EAAE,IAFwC;AAGvDC,YAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH+C;AAIvDC,YAAAA,MAAM,EAAE;AAJ+C,WAApC,CANO;;AAAA;AAMtBC,UAAAA,MANsB;AAAA,2CAarB,CAACA,MAAM,CAACC,SAAR,GAAoBD,MAApB,GAA6B,KAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAiBP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACChB,WAAW,CAACG,QAAZ,CACvBH,WAAW,CAACI,WADW,EAEvBJ,WAAW,CAACiB,MAFW,CADD;;AAAA;AAAA;AAChBZ,UAAAA,MADgB,0BAChBA,MADgB;;AAAA,gBAMpBA,MAAM,KAAK,SANS;AAAA;AAAA;AAAA;;AAOtBC,UAAAA,KAAK,CAAC,mEAAD,CAAL;AAPsB,4CAQf,KARe;;AAAA;AAAA;AAAA,2CAUDL,WAAW,CAACiB,iBAAZ,CAA8B;AACjDC,YAAAA,OAAO,EAAE,GADwC;AAEjDN,YAAAA,MAAM,EAAE,IAFyC;AAGjDF,YAAAA,aAAa,EAAES,QAAQ,CAACC,EAAT,IAAe,KAAf,GAAuB,KAAvB,GAA+B,IAHG;AAIjDT,YAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ;AAJyC,WAA9B,CAVC;;AAAA;AAUhBE,UAAAA,MAVgB;AAAA,4CAiBf,CAACA,MAAM,CAACC,SAAR,GAAoBD,MAApB,GAA6B,KAjBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAoBP,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACN,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAElD,gBAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AAGAD,YAAAA,GAAG,CAACE,MAAJ,GAAa,YAAY;AACvBJ,cAAAA,OAAO,CAACE,GAAG,CAACG,QAAL,CAAP;AACD,aAFD;;AAKAH,YAAAA,GAAG,CAACI,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACzBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAN,cAAAA,MAAM,CAAC,IAAIS,SAAJ,CAAc,qBAAd,CAAD,CAAN;AACD,aAHD;;AAMAR,YAAAA,GAAG,CAACS,YAAJ,GAAmB,MAAnB;AACAT,YAAAA,GAAG,CAACU,IAAJ,CAAS,KAAT,EAAgBd,QAAhB,EAA0B,IAA1B;AAEAI,YAAAA,GAAG,CAACW,IAAJ;AACD,WApBkB,CADM;;AAAA;AACnBC,UAAAA,IADmB;AAAA,4CAuBlBA,IAvBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import * as Permissions from \"expo-permissions\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Platform } from \"react-native\";\n\nexport const openImageLibrary = async () => {\n  const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n  if (status !== \"granted\") {\n    alert(\"Sorry, we need camera roll permission to select an image\");\n    return false;\n  } else {\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [1, 1],\n      base64: true,\n    });\n\n    return !result.cancelled ? result : false;\n  }\n};\n\nexport const openCamera = async () => {\n  const { status } = await Permissions.askAsync(\n    Permissions.CAMERA_ROLL,\n    Permissions.CAMERA\n  );\n\n  if (status !== \"granted\") {\n    alert(\"Sorry, we need camera roll & camera permission to select an image\");\n    return false;\n  } else {\n    const result = await ImagePicker.launchCameraAsync({\n      quality: 0.1,\n      base64: true,\n      allowsEditing: Platform.OS == \"ios\" ? false : true,\n      aspect: [4, 3],\n    });\n\n    return !result.cancelled ? result : false;\n  }\n};\nexport const prepareBlob = async (imageUri) => {\n  const blob = await new Promise((resolve, reject) => {\n    //new request\n    const xml = new XMLHttpRequest();\n\n    //success resolved it\n    xml.onload = function () {\n      resolve(xml.response);\n    };\n\n    //error threw new error\n    xml.onerror = function (e) {\n      console.log(e);\n      reject(new TypeError(\"Image Upload failed\"));\n    };\n\n    //set the response type to get the blob\n    xml.responseType = \"blob\";\n    xml.open(\"GET\", imageUri, true);\n    //send the request\n    xml.send();\n  });\n\n  return blob;\n};\n"]},"metadata":{},"sourceType":"module"}