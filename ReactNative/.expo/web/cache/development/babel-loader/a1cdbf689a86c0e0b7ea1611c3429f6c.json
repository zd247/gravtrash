{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/components/CodeInputLayout.js\";\nimport React, { useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport colors from \"../assets/colors\";\nimport { CodeField, Cursor, useBlurOnFulfill, useClearByFocusCell } from 'react-native-confirmation-code-field';\nvar CELL_COUNT = 6;\n\nvar CodeInputLayout = function CodeInputLayout(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var ref = useBlurOnFulfill({\n    value: value,\n    cellCount: CELL_COUNT\n  });\n\n  var _useClearByFocusCell = useClearByFocusCell({\n    value: value,\n    setValue: setValue\n  }),\n      _useClearByFocusCell2 = _slicedToArray(_useClearByFocusCell, 2),\n      handlers = _useClearByFocusCell2[0],\n      getCellOnLayoutHandler = _useClearByFocusCell2[1];\n\n  var codeInputHandler = function codeInputHandler(enteredValue) {\n    setValue(enteredValue);\n  };\n\n  var setInputIntoProps = function setInputIntoProps() {\n    props.onInput(value);\n  };\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }, React.createElement(SafeAreaView, {\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }\n  }, React.createElement(CodeField, _extends({\n    ref: ref\n  }, handlers, {\n    value: value,\n    onChangeText: codeInputHandler,\n    cellCount: CELL_COUNT,\n    rootStyle: styles.codeFiledRoot,\n    keyboardType: \"number-pad\",\n    renderCell: function renderCell(_ref) {\n      var index = _ref.index,\n          symbol = _ref.symbol,\n          isFocused = _ref.isFocused;\n      return React.createElement(Text, {\n        key: index,\n        style: [styles.cell, isFocused && styles.focusCell],\n        onLayout: getCellOnLayoutHandler(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, symbol || (isFocused ? React.createElement(Cursor, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 32\n        }\n      }) : null));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }))), React.createElement(CustomActionButton, {\n    style: [styles.button, {\n      backgroundColor: colors.bgUserLogin,\n      marginTop: 100\n    }],\n    title: \"Verify\",\n    onPress: setInputIntoProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, \"Verify\")));\n};\n\nexport default CodeInputLayout;\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    padding: 20\n  },\n  codeFiledRoot: {\n    marginTop: 20\n  },\n  cell: {\n    width: 40,\n    height: 40,\n    lineHeight: 38,\n    fontSize: 24,\n    borderWidth: 2,\n    borderColor: '#00000030',\n    textAlign: 'center'\n  },\n  focusCell: {\n    borderColor: '#000'\n  },\n  button: {\n    borderColor: colors.bgPrimary,\n    borderWidth: 0.5,\n    borderRadius: 20,\n    alignSelf: 'center',\n    width: '80%'\n  }\n});","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/components/CodeInputLayout.js"],"names":["React","useState","CustomActionButton","colors","CodeField","Cursor","useBlurOnFulfill","useClearByFocusCell","CELL_COUNT","CodeInputLayout","props","value","setValue","ref","cellCount","handlers","getCellOnLayoutHandler","codeInputHandler","enteredValue","setInputIntoProps","onInput","styles","root","codeFiledRoot","index","symbol","isFocused","cell","focusCell","button","backgroundColor","bgUserLogin","marginTop","fontWeight","color","StyleSheet","create","flex","padding","width","height","lineHeight","fontSize","borderWidth","borderColor","textAlign","bgPrimary","borderRadius","alignSelf"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { SafeAreaView, Text, StyleSheet, View } from 'react-native'\nimport CustomActionButton from '../components/CustomTempButton'\nimport colors from '../assets/colors'\n\nimport {\n\tCodeField,\n\tCursor,\n\tuseBlurOnFulfill,\n\tuseClearByFocusCell,\n} from 'react-native-confirmation-code-field'\n\nconst CELL_COUNT = 6\n\nconst CodeInputLayout = props => {\n\tconst [value, setValue] = useState('')\n\tconst ref = useBlurOnFulfill({ value, cellCount: CELL_COUNT })\n\tconst [handlers, getCellOnLayoutHandler] = useClearByFocusCell({\n\t\tvalue,\n\t\tsetValue,\n  })\n  \n  const codeInputHandler = (enteredValue) => {\n    setValue(enteredValue)\n  }\n\n\tconst setInputIntoProps = () => {\n    props.onInput(value)\n\t}\n\n\treturn (\n\t\t<View>\n\t\t\t<SafeAreaView style={styles.root}>\n\t\t\t\t<CodeField\n\t\t\t\t\tref={ref}\n\t\t\t\t\t{...handlers}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonChangeText={codeInputHandler}\n\t\t\t\t\tcellCount={CELL_COUNT}\n\t\t\t\t\trootStyle={styles.codeFiledRoot}\n\t\t\t\t\tkeyboardType='number-pad'\n\t\t\t\t\trenderCell={({ index, symbol, isFocused }) => (\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tstyle={[styles.cell, isFocused && styles.focusCell]}\n\t\t\t\t\t\t\tonLayout={getCellOnLayoutHandler(index)}>\n\t\t\t\t\t\t\t{symbol || (isFocused ? <Cursor /> : null)}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</SafeAreaView>\n\n\t\t\t<CustomActionButton\n\t\t\t\tstyle={[\n\t\t\t\t\tstyles.button,\n\t\t\t\t\t{ backgroundColor: colors.bgUserLogin, marginTop: 100 },\n\t\t\t\t]}\n\t\t\t\ttitle='Verify'\n\t\t\t\tonPress={setInputIntoProps}>\n\t\t\t\t<Text style={{ fontWeight: 'bold', color: 'white' }}>Verify</Text>\n\t\t\t</CustomActionButton>\n\t\t</View>\n\t)\n}\n\nexport default CodeInputLayout\n\nconst styles = StyleSheet.create({\n\troot: { flex: 1, padding: 20 },\n\tcodeFiledRoot: { marginTop: 20 },\n\tcell: {\n\t\twidth: 40,\n\t\theight: 40,\n\t\tlineHeight: 38,\n\t\tfontSize: 24,\n    borderWidth: 2,\n\t\tborderColor: '#00000030',\n\t\ttextAlign: 'center',\n\t},\n\tfocusCell: {\n\t\tborderColor: '#000',\n  },\n  button: {\n\t\tborderColor: colors.bgPrimary,\n\t\tborderWidth: 0.5,\n\t\tborderRadius: 20,\n\t\talignSelf: 'center',\n\t\twidth: '80%',\n\t},\n})\n"]},"metadata":{},"sourceType":"module"}