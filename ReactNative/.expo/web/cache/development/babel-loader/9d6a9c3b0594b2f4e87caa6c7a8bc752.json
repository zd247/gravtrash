{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/screens/SettingScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport colors from \"../assets/colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen() {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.signOut = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(firebase.auth().signOut());\n\n            case 3:\n              _this.props.onsignOut();\n\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              alert(\"Unable to sign out right now\");\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.props.navigation.openDrawer();\n        },\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }\n      }, React.createElement(Ionicons, {\n        name: \"ios-menu\",\n        size: 30,\n        color: \"white\",\n        style: {\n          marginLeft: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      })), React.createElement(Text, {\n        style: styles.headerTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }\n      }, \"Setting Screen\")), React.createElement(View, {\n        style: styles.body,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, !this.props.auth.isDriver ? React.createElement(CustomActionButton, {\n        style: styles.changeMode,\n        title: \"Change To Driver Mode\",\n        onPress: this.props.changeDriverMode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: \"100\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }\n      }, \"Change To Driver Mode\")) : React.createElement(CustomActionButton, {\n        style: styles.changeMode,\n        title: \"Change To Customer Mode\",\n        onPress: this.props.changeCustomerMode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: \"100\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }, \"Change To Customer Mode\")), React.createElement(CustomActionButton, {\n        style: styles.changeMode,\n        title: \"Sign Up\",\n        onPress: this.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: \"100\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      }, \"Logout\"))));\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signIn: function signIn(user) {\n      return dispatch({\n        type: \"SIGN_IN\",\n        payload: user\n      });\n    },\n    onsignOut: function onsignOut() {\n      return dispatch({\n        type: \"SIGN_OUT\"\n      });\n    },\n    changeDriverMode: function changeDriverMode() {\n      return dispatch({\n        type: \"CHANGE_TO_DRIVER_MODE\"\n      });\n    },\n    changeCustomerMode: function changeCustomerMode() {\n      return dispatch({\n        type: \"CHANGE_TO_CUSTOMER_MODE\"\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingScreen);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.bgMain\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20\n  },\n  header: {\n    height: 70,\n    borderBottomWidth: 0.5,\n    borderBottomColor: colors.borderColor,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\"\n  },\n  headerTitle: {\n    fontSize: 24,\n    color: \"white\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\"\n  },\n  body: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/screens/SettingScreen.js"],"names":["React","Component","CustomActionButton","colors","Ionicons","connect","firebase","SettingScreen","signOut","auth","props","onsignOut","alert","styles","container","header","navigation","openDrawer","flex","marginLeft","headerTitle","body","isDriver","changeMode","changeDriverMode","fontWeight","color","changeCustomerMode","mapStateToProps","state","mapDispatchToProps","dispatch","signIn","user","type","payload","StyleSheet","create","backgroundColor","bgMain","width","borderWidth","borderColor","bgError","marginBottom","height","borderBottomWidth","borderBottomColor","alignItems","justifyContent","flexDirection","fontSize","position"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { View, Text, StyleSheet, TouchableOpacity } from \"react-native\";\n\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport colors from \"../assets/colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nclass SettingScreen extends Component {\n  signOut = async () => {\n    try {\n      await firebase.auth().signOut();\n      this.props.onsignOut();\n      //this.props.navigation.navigate(\"LoginScreen\");\n    } catch (error) {\n      alert(\"Unable to sign out right now\");\n    }\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity\n            onPress={() => this.props.navigation.openDrawer()}\n            style={{ flex: 1 }}\n          >\n            <Ionicons\n              name=\"ios-menu\"\n              size={30}\n              color=\"white\"\n              style={{ marginLeft: 10 }}\n            />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Setting Screen</Text>\n        </View>\n        <View style={styles.body}>\n          {!this.props.auth.isDriver ? (\n            <CustomActionButton\n              style={styles.changeMode}\n              title=\"Change To Driver Mode\"\n              onPress={this.props.changeDriverMode}\n            >\n              <Text style={{ fontWeight: \"100\", color: \"white\" }}>\n                Change To Driver Mode\n              </Text>\n            </CustomActionButton>\n          ) : (\n            <CustomActionButton\n              style={styles.changeMode}\n              title=\"Change To Customer Mode\"\n              onPress={this.props.changeCustomerMode}\n            >\n              <Text style={{ fontWeight: \"100\", color: \"white\" }}>\n                Change To Customer Mode\n              </Text>\n            </CustomActionButton>\n          )}\n          <CustomActionButton\n            style={styles.changeMode}\n            title=\"Sign Up\"\n            onPress={this.signOut}\n          >\n            <Text style={{ fontWeight: \"100\", color: \"white\" }}>Logout</Text>\n          </CustomActionButton>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (user) => dispatch({ type: \"SIGN_IN\", payload: user }),\n    onsignOut: () => dispatch({ type: \"SIGN_OUT\" }),\n    changeDriverMode: () => dispatch({ type: \"CHANGE_TO_DRIVER_MODE\" }),\n    changeCustomerMode: () => dispatch({ type: \"CHANGE_TO_CUSTOMER_MODE\" }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingScreen);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n\n    backgroundColor: colors.bgMain,\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20,\n  },\n  header: {\n    height: 70,\n    borderBottomWidth: 0.5,\n    borderBottomColor: colors.borderColor,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n  },\n  headerTitle: {\n    fontSize: 24,\n    color: \"white\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n  },\n  body: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}