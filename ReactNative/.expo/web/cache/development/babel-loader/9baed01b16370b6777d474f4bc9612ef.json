{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/zd/projects/trashgrav-SEPM/ReactNative/screens/SettingScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport colors from \"../assets/colors\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nvar SettingScreen = function (_Component) {\n  _inherits(SettingScreen, _Component);\n\n  var _super = _createSuper(SettingScreen);\n\n  function SettingScreen() {\n    var _this;\n\n    _classCallCheck(this, SettingScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.signOut = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(firebase.auth().signOut());\n\n            case 3:\n              _this.props.onsignOut();\n\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              alert(\"Unable to sign out right now\");\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(SettingScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 7\n        }\n      }, React.createElement(CustomActionButton, {\n        style: {\n          width: 200,\n          backgroundColor: \"transparent\",\n          borderWidth: 0.5,\n          borderColor: colors.bgError\n        },\n        title: \"Sign Up\",\n        onPress: this.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: \"100\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }\n      }, \"Logout\")));\n    }\n  }]);\n\n  return SettingScreen;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signIn: function signIn(user) {\n      return dispatch({\n        type: \"SIGN_IN\",\n        payload: user\n      });\n    },\n    onsignOut: function onsignOut() {\n      return dispatch({\n        type: \"SIGN_OUT\"\n      });\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SettingScreen);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: colors.bgMain\n  }\n});","map":{"version":3,"sources":["/home/zd/projects/trashgrav-SEPM/ReactNative/screens/SettingScreen.js"],"names":["React","Component","CustomActionButton","colors","connect","firebase","SettingScreen","signOut","auth","props","onsignOut","alert","styles","container","width","backgroundColor","borderWidth","borderColor","bgError","fontWeight","color","mapDispatchToProps","dispatch","signIn","user","type","payload","StyleSheet","create","flex","alignItems","justifyContent","bgMain"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAGA,OAAOC,kBAAP;AACA,OAAOC,MAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B;AACA,OAAO,eAAP;;IACMC,a;;;;;;;;;;;;;;;;UACJC,O,GAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEAF,QAAQ,CAACG,IAAT,GAAgBD,OAAhB,EAFA;;AAAA;AAGN,oBAAKE,KAAL,CAAWC,SAAX;;AAHM;AAAA;;AAAA;AAAA;AAAA;AAMNC,cAAAA,KAAK,CAAC,8BAAD,CAAL;;AANM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAUD;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,kBAAD;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE,GADF;AAELC,UAAAA,eAAe,EAAE,aAFZ;AAGLC,UAAAA,WAAW,EAAE,GAHR;AAILC,UAAAA,WAAW,EAAEd,MAAM,CAACe;AAJf,SADT;AAOE,QAAA,KAAK,EAAC,SAPR;AAQE,QAAA,OAAO,EAAE,KAAKX,OARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEY,UAAAA,UAAU,EAAE,KAAd;AAAqBC,UAAAA,KAAK,EAAE;AAA5B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF,CADF,CADF;AAgBD;;;;EA5ByBnB,S;;AA+B5B,IAAMoB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLC,IAAAA,MAAM,EAAE,gBAACC,IAAD;AAAA,aAAUF,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAEF;AAA5B,OAAD,CAAlB;AAAA,KADH;AAELd,IAAAA,SAAS,EAAE;AAAA,aAAMY,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA;AAFN,GAAP;AAID,CALD;;AAOA,eAAerB,OAAO,CAAC,IAAD,EAAOiB,kBAAP,CAAP,CAAkCf,aAAlC,CAAf;AAEA,IAAMM,MAAM,GAAGe,UAAU,CAACC,MAAX,CAAkB;AAC/Bf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAIThB,IAAAA,eAAe,EAAEZ,MAAM,CAAC6B;AAJf;AADoB,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\n\nimport CustomActionButton from \"../components/CustomTempButton\";\nimport colors from \"../assets/colors\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nclass SettingScreen extends Component {\n  signOut = async () => {\n    try {\n      await firebase.auth().signOut();\n      this.props.onsignOut();\n      //this.props.navigation.navigate(\"LoginScreen\");\n    } catch (error) {\n      alert(\"Unable to sign out right now\");\n    }\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <CustomActionButton\n          style={{\n            width: 200,\n            backgroundColor: \"transparent\",\n            borderWidth: 0.5,\n            borderColor: colors.bgError,\n          }}\n          title=\"Sign Up\"\n          onPress={this.signOut}\n        >\n          <Text style={{ fontWeight: \"100\", color: \"white\" }}>Logout</Text>\n        </CustomActionButton>\n      </View>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (user) => dispatch({ type: \"SIGN_IN\", payload: user }),\n    onsignOut: () => dispatch({ type: \"SIGN_OUT\" }),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SettingScreen);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: colors.bgMain,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}