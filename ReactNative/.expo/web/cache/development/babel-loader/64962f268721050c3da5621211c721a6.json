{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/screens/Customer/CustomerMapScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport * as Location from \"expo-location\";\nimport MapView from \"react-native-maps\";\nimport CustomActionButton from \"../../components/CustomTempButton\";\nimport apiKey from \"../../helpers/googleAPIkey\";\nimport colors from \"../../assets/colors\";\nimport ItemList from \"../../components/ItemList\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\nvar CustomerMapScreen = function (_Component) {\n  _inherits(CustomerMapScreen, _Component);\n\n  var _super = _createSuper(CustomerMapScreen);\n\n  function CustomerMapScreen(props) {\n    var _this;\n\n    _classCallCheck(this, CustomerMapScreen);\n\n    _this = _super.call(this, props);\n\n    _this.findCurrentLocationAsync = function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (status !== \"granted\") {\n                _this.setState({\n                  errorMessage: \"Permission to access location was denied\"\n                });\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 7:\n              location = _context.sent;\n\n              _this.setState({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude\n              });\n\n              console.log(JSON.stringify(location));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      location: null,\n      errorMessage: null,\n      latitude: 0,\n      longitude: 0,\n      locationPredictions: []\n    };\n    _this.onChangeDestinationDebounced = _.debounce(_this.onChangeDestination, 1000);\n    return _this;\n  }\n\n  _createClass(CustomerMapScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this2.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, function (error) {\n        return console.error(error);\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 2000,\n        timeout: 20000\n      });\n    }\n  }, {\n    key: \"onChangeDestination\",\n    value: function onChangeDestination(destination) {\n      var apiUrl, result, jsonResult;\n      return _regeneratorRuntime.async(function onChangeDestination$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setState({\n                destination: destination\n              });\n              apiUrl = \"https://maps.googleapis.com/maps/api/place/autocomplete/json?key=\" + apiKey + \"&input={\" + destination + \"}&location=\" + this.state.latitude + \",\" + this.state.longitude + \"&radius=2000\";\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(fetch(apiUrl));\n\n            case 4:\n              result = _context2.sent;\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(result.json());\n\n            case 7:\n              jsonResult = _context2.sent;\n              this.setState({\n                locationPredictions: jsonResult.predictions\n              });\n              console.log(jsonResult);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pressedPrediction\",\n    value: function pressedPrediction(prediction) {\n      console.log(prediction);\n      Keyboard.dismiss();\n      this.setState({\n        locationPredictions: [],\n        destination: prediction.description\n      });\n      Keyboard;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var locationPredictions = this.state.locationPredictions.map(function (prediction) {\n        return React.createElement(TouchableHighlight, {\n          key: prediction.id,\n          onPress: function onPress() {\n            return _this3.pressedPrediction(prediction);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          style: styles.locationSuggestion,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }\n        }, prediction.description));\n      });\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }\n      }, React.createElement(SafeAreaView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }), React.createElement(MapView, {\n        style: styles.map,\n        provider: \"google\",\n        region: {\n          latitude: this.state.latitude,\n          longitude: this.state.longitude,\n          latitudeDelta: 0.015,\n          longitudeDelta: 0.0121\n        },\n        showsUserLocation: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: {\n          flex: 1,\n          position: \"absolute\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }, React.createElement(TextInput, {\n        placeholder: \"Enter location..\",\n        style: styles.destinationInput,\n        onChangeText: function onChangeText(destination) {\n          _this3.setState({\n            destination: destination\n          });\n\n          _this3.onChangeDestinationDebounced(destination);\n        },\n        value: this.state.destination,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }), locationPredictions), React.createElement(SafeAreaView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return CustomerMapScreen;\n}(Component);\n\nexport default CustomerMapScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.bgMain\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20\n  },\n  header: {\n    height: 70,\n    borderBottomWidth: 0.5,\n    borderBottomColor: colors.borderColor,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\"\n  },\n  headerTitle: {\n    fontSize: 24,\n    color: \"white\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\"\n  },\n  body: {\n    flex: 1\n  },\n  map: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height\n  },\n  destinationInput: {\n    borderWidth: 0.5,\n    borderColor: \"grey\",\n    height: 40,\n    marginTop: 20,\n    marginLeft: 5,\n    marginRight: 5,\n    padding: 5,\n    backgroundColor: \"white\",\n    width: Dimensions.get(\"window\").width\n  },\n  locationSuggestion: {\n    backgroundColor: \"white\",\n    padding: 10,\n    fontSize: 18,\n    borderWidth: 0.5\n  }\n});","map":{"version":3,"sources":["/Users/ThanhPhan/Programming/ReactNative/trashgrav-SEPM/ReactNative/screens/Customer/CustomerMapScreen.js"],"names":["React","Component","Location","MapView","CustomActionButton","apiKey","colors","ItemList","Ionicons","connect","_","CustomerMapScreen","props","findCurrentLocationAsync","requestPermissionsAsync","status","setState","errorMessage","getCurrentPositionAsync","location","latitude","coords","longitude","console","log","JSON","stringify","state","locationPredictions","onChangeDestinationDebounced","debounce","onChangeDestination","navigator","geolocation","getCurrentPosition","position","error","enableHighAccuracy","maximumAge","timeout","destination","apiUrl","fetch","result","json","jsonResult","predictions","prediction","Keyboard","dismiss","description","map","id","pressedPrediction","styles","locationSuggestion","container","latitudeDelta","longitudeDelta","flex","destinationInput","StyleSheet","create","backgroundColor","bgMain","changeMode","width","borderWidth","borderColor","bgError","marginBottom","header","height","borderBottomWidth","borderBottomColor","alignItems","justifyContent","flexDirection","headerTitle","fontSize","color","body","Dimensions","get","marginTop","marginLeft","marginRight","padding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Dimensions,\n  SafeAreaView,\n  Keyboard,\n  TextInput,\n  TouchableHighlight,\n  FlatList,\n} from \"react-native\";\n\nimport * as Location from \"expo-location\";\nimport MapView from \"react-native-maps\";\n\nimport CustomActionButton from \"../../components/CustomTempButton\";\n\nimport apiKey from \"../../helpers/googleAPIkey\";\n\nimport colors from \"../../assets/colors\";\nimport ItemList from \"../../components/ItemList\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\nclass CustomerMapScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: null,\n      errorMessage: null,\n      latitude: 0,\n      longitude: 0,\n      locationPredictions: [],\n    };\n    this.onChangeDestinationDebounced = _.debounce(\n      this.onChangeDestination,\n      1000\n    );\n  }\n\n  componentDidMount() {\n    //Get current location and set initial region to this\n    //this.findCurrentLocationAsync();\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        this.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        });\n      },\n      (error) => console.error(error),\n      { enableHighAccuracy: true, maximumAge: 2000, timeout: 20000 }\n    );\n  }\n\n  findCurrentLocationAsync = async () => {\n    let { status } = await Location.requestPermissionsAsync();\n\n    if (status !== \"granted\") {\n      this.setState({\n        errorMessage: \"Permission to access location was denied\",\n      });\n    }\n\n    let location = await Location.getCurrentPositionAsync({});\n    this.setState({\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n    });\n    console.log(JSON.stringify(location));\n  };\n\n  async onChangeDestination(destination) {\n    this.setState({ destination });\n    const apiUrl = `https://maps.googleapis.com/maps/api/place/autocomplete/json?key=${apiKey}&input={${destination}}&location=${this.state.latitude},${this.state.longitude}&radius=2000`;\n    const result = await fetch(apiUrl);\n    const jsonResult = await result.json();\n    this.setState({\n      locationPredictions: jsonResult.predictions,\n    });\n    console.log(jsonResult);\n  }\n\n  pressedPrediction(prediction) {\n    console.log(prediction);\n    Keyboard.dismiss();\n    this.setState({\n      locationPredictions: [],\n      destination: prediction.description,\n    });\n    Keyboard;\n  }\n\n  render() {\n    const locationPredictions = this.state.locationPredictions.map(\n      (prediction) => (\n        <TouchableHighlight\n          key={prediction.id}\n          onPress={() => this.pressedPrediction(prediction)}\n        >\n          <Text style={styles.locationSuggestion}>\n            {prediction.description}\n          </Text>\n        </TouchableHighlight>\n      )\n    );\n    return (\n      <View style={styles.container}>\n        <SafeAreaView />\n\n        <MapView\n          style={styles.map}\n          provider=\"google\"\n          region={{\n            latitude: this.state.latitude,\n            longitude: this.state.longitude,\n            latitudeDelta: 0.015,\n            longitudeDelta: 0.0121,\n          }}\n          showsUserLocation={true}\n        />\n        <View style={{ flex: 1, position: \"absolute\" }}>\n          <TextInput\n            placeholder=\"Enter location..\"\n            style={styles.destinationInput}\n            onChangeText={(destination) => {\n              this.setState({ destination });\n              this.onChangeDestinationDebounced(destination);\n            }}\n            value={this.state.destination}\n          />\n          {locationPredictions}\n        </View>\n\n        <SafeAreaView />\n      </View>\n    );\n  }\n}\n\nexport default CustomerMapScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.bgMain,\n  },\n  changeMode: {\n    width: 200,\n    backgroundColor: \"transparent\",\n    borderWidth: 0.5,\n    borderColor: colors.bgError,\n    marginBottom: 20,\n  },\n  header: {\n    height: 70,\n    borderBottomWidth: 0.5,\n    borderBottomColor: colors.borderColor,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n  },\n  headerTitle: {\n    fontSize: 24,\n    color: \"white\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n  },\n  body: {\n    flex: 1,\n  },\n  map: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n  },\n  destinationInput: {\n    borderWidth: 0.5,\n    borderColor: \"grey\",\n    height: 40,\n    marginTop: 20,\n    marginLeft: 5,\n    marginRight: 5,\n    padding: 5,\n    backgroundColor: \"white\",\n    width: Dimensions.get(\"window\").width,\n  },\n  locationSuggestion: {\n    backgroundColor: \"white\",\n    padding: 10,\n    fontSize: 18,\n    borderWidth: 0.5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}